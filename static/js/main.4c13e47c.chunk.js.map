{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/SpecialDegreeReqs.tsx","components/AllDegreeReqs.tsx","components/UploadSemesterModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","lists","semesterCnt","credits","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","prevReq","setPrevReq","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","filter","reqs","includes","map","req","Item","onClick","handleReqClick","Footer","Button","editClass","specreq","cIdx","index","length","newClasses","setTechElectiveCredits","techElectiveCredits","setFocusAreaCredits","focusAreaCredits","copyList","listOfCourseLists","courseList","courses","setlistOfCourseLists","Course","course","currCourses","setCurrCourses","removeSpecialReqCredits","newCourses","concat","i","setGlobalCredits","globalCredits","removelistOfCourseLists","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","slice","newCourse","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","saveAdd","newClass","console","log","c","addlistOfCourseLists","handleDeptClick","selectedDept","deptCourses","handleIDClick","cID","selectedCourse","getPrereqs","size","Row","Col","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","undefined","validCourses","handleCourseSearch","xs","style","color","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","year","setCurrClasses","Table","striped","bordered","colSpan","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","Text","SpecialDegreeReqs","displayWhich","AllDegreeReqs","checkDegreeReq","aReq","j","checkSpecialReq","displayWhichReq","UploadSemesterModal","setPlan","setSemesterCnt","parseData","csv","newLine","headerEnd","indexOf","newPlanRaw","planCooking","parser","parserTmp","parserStart","parserEnd","newSemCnt","newSemCnt1","parseInt","newSemYear","newSemSeason","newClassID","isNaN","newNode","cnt","data","semesterList","semesterTemplate","buildYear","buildSeason","totalCredits","d","creditNumber","classFound","s","saveUpload","type","e","currentTarget","files","file","readfile","FileReader","readAsText","onload","planCSV","result","String","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_LISTOFCOURSELISTS","INITIAL_LISTOFCOURSELISTS","INITIAL_SEMESTER","getLocalStoragePlan","clear","rawSchedule","localStorage","getItem","JSON","parse","App","currSemesters","setCurrSemesters","allDegreeReqVisible","setAllDegreeReqVisible","uploadVisible","setUploadVisible","rawList","getLocalStorageList","prepCSV","newDes","replace","useEffect","stringify","totalCreditsListener","newSeason","newYear","newSememester","newList","resetCredits","popSemester","pop","subtractCredits","poppedList","popLists","setItem","content","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","newClassList","semesters","newSemesterList","window","location","reload","buildCurrSemesters","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4c13e47c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n    const [prevReq, setPrevReq] = useState<string>(\"\");\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR, specreq: reqId};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n\n        if(reqId === \"Six additional credits of technical electives\"){   \n            credits.setTechElectiveCredits(credits.techElectiveCredits+editClass.credits);\n            if(prevReq === \"12 credits for an approved focus area\") {  \n                credits.setFocusAreaCredits(credits.focusAreaCredits-editClass.credits);   //remove credits from focus area if you switched from focus area to tech electives\n            } \n        } else if (reqId === \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits+editClass.credits);\n            if(prevReq === \"Six additional credits of technical electives\"){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-editClass.credits); //vice versa of above case\n            }\n        } \n\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList => [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1].filter(courses => courses.id != ogClass.id), editClass];\n        lists.setlistOfCourseLists(copyList);\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n\n    function handleReqClick(req: string) { \n        setPrevReq(reqId);\n        setReqId(req); \n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" aria-label=\"course-id-input\" rows={1}\n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key={req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\n//import { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, lists, semesterCnt, credits} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    \n    function editCourse():void{\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id === course.id){\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        removelistOfCourseLists();\n        setCurrCourses(newCourses);\n    }\n\n    function removelistOfCourseLists() { \n        for(let i = 0; i < lists.listOfCourseLists[semesterCnt-1].length; i++){\n            if(lists.listOfCourseLists[semesterCnt-1][i].id === course.id) {\n                credits.setGlobalCredits(credits.globalCredits - lists.listOfCourseLists[semesterCnt-1][i].credits);\n                removeSpecialReqCredits(lists.listOfCourseLists[semesterCnt-1][i]);\n                const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n                copyList[semesterCnt-1] = copyList[semesterCnt-1].filter(courses => courses.id != course.id);\n                lists.setlistOfCourseLists(copyList);\n                break;\n            }\n        }\n    }\n\n    function removeSpecialReqCredits(course: Class){\n        if(course.specreq == \"Six additional credits of technical electives\"){\n            credits.setTechElectiveCredits(credits.techElectiveCredits-course.credits);\n        } else if (course.specreq == \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits-course.credits);\n        }\n    }\n\n    \n    return (\n        <tr>\n            <td>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </td>\n            <td data-testid=\"course-id\">{course.id} {course.name}</td>\n            {//<td>{course.name}</td>\n            }\n            <td>{course.credits}</td>\n            <td><button onClick={editCourse}>Edit</button></td>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </tr>\n    );\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Class Year</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-class-year\"\n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Season Semester</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-season\"\n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.id.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const courseId = course.id;\n    const newCourse:Class = { id:courseId, name:course.name, credits:course.credits, \n        description:course.description, prereqs:course.prereqs, specreq:\"\"};\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string>(\"\");\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR, \"specreq\":\"\"};\n        const prereqs = newClass.prereqs;  //changing app to make it complatibale with new courseData.josn\n        console.log(newClass);\n        setCoursePreR(prereqs);\n        setCurrCourse(newClasses.concat(newClass));\n        addlistOfCourseLists(newClass);\n        hide();\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Course Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseName(\"Course Name\");\n        setCourseDesc(\"Course Description\");\n        setCourseCred(0);\n        setCoursePreR(\"\");\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1 && len === 4){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        if(courseMap[partOfID.slice(0,4)] === undefined){\n            console.log(\"Not a valid department\");\n        }else{\n            const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n            if(validCourses.length === 1 && len === 7){\n                handleIDClick(validCourses[0].id);\n            }\n            \n           \n        }\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        setCourseId(\"Course ID\");\n        setDeptSearch(selectedDept);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        setErrorAddCourse(false);\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            console.log(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(getPrereqs(visibleCourses[cIdx].id));\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        //let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                return deptCourses[i].prereqs;\n                //loc = i;\n                //break;\n            }\n        }\n        return \"\";\n    }\n\n\n    function addlistOfCourseLists(c: Class){\n        credits.setGlobalCredits(credits.globalCredits+courseCred);\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1], c];\n        lists.setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\" data-testid=\"dept-dropdown\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\" data-testid=\"dept-drop-menu\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu data-testid=\"course-drop-menu\">\n                                {visibleCourses.map(c =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p style={{color: \"red\"}}>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"add-course-button\" variant=\"primary\" onClick={()=>{\n                    saveAdd(); \n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { semester } from \"../interfaces/semester\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, lists, semesterCnt, credits}: \n    {semester: semester, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(semester.year);\n    const [season,setSeason] = React.useState<string>(semester.season);\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    //console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return (\n        <div className=\"semesterCard\">\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Table  striped bordered size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Remove</th>\n                        <th>Course</th>\n                        {//<th>Course Name</th>\n                        }\n                        <th>Credits</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {currClasses.map(c=> {\n                        return (\n                            <Course key = {c.id} course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                        );\n                    })\n                    }\n                    <tr>\n                        <td colSpan={5}><Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button></td>\n                    </tr>\n                </tbody>\n                <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n            </Table>\n        </div>\n    );\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\nexport function SpecialDegreeReqs({requirement, fulfilled, displayWhich, credits}: \n    {requirement: string, fulfilled: boolean, displayWhich: boolean, credits: creditsHandlers}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}</BootstrapCard.Text>\n                <BootstrapCard.Text> {displayWhich ? credits.techElectiveCredits + \" out of 6\" : credits.focusAreaCredits + \" out of 12\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport { SpecialDegreeReqs } from \"../components/SpecialDegreeReqs\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { Button, Modal, Table} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n\n\nexport function AllDegreeReqs({visible, setVisible, listOfCourseLists, credits}: \n    {visible: boolean, setVisible: (v: boolean)=>void , listOfCourseLists: Class[][], credits: creditsHandlers}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        let j = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            for(j = 0; j < listOfCourseLists[i].length; j++){\n                if(aReq.id.includes(listOfCourseLists[i][j].id)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function checkSpecialReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\" && credits.techElectiveCredits === 6){\n            return true;\n        } else if(aReq.id === \"12 credits for an approved focus area\" && credits.focusAreaCredits === 12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function displayWhichReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\"){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function hide(){\n        setVisible(!visible);\n    }\n\n    return <Modal show={visible}>\n        <Modal.Header>\n            <Modal.Title>Degree Requirements</Modal.Title>\n            <Button onClick={hide}>Close</Button>\n        </Modal.Header>\n        \n        <strong className=\"degree-subtitle\">Credit Count: {credits.globalCredits} out of 124 needed</strong>\n        <Table data-testid=\"degreeReqs\">\n            <th className=\"degree-subtitle\">Core Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CISC\") || reqs.id.includes(\"MATH\") || reqs.id.includes(\"ENGL\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Special Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map((aReq: DegreeReq) => {\n                    return (\n                        <SpecialDegreeReqs key={aReq.id} requirement={aReq.id} fulfilled={checkSpecialReq(aReq)} displayWhich={displayWhichReq(aReq)} credits={credits}></SpecialDegreeReqs> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <strong className=\"degree-subtitle\">Science Requirements</strong>\n        <Table> \n            <th className=\"degree-subtitle\">Option 1</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"PHYS\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 2</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CHEM\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 3</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"BISC\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 4</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL105\") || reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL115\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 5</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL110\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n    </Modal>;\n}","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { semester } from \"../interfaces/semester\";\nimport { importClass } from \"../interfaces/importPlan\";\nimport { Class } from \"../interfaces/course\";\nimport { courseMap } from \"../utilities/extractClasses\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\n\n\nexport function UploadSemesterModal({credits, visible, setVisible, setPlan, setSemesterCnt, setSeason, setClassYear}: \n    {credits: creditsHandlers, visible: boolean, setVisible: (b: boolean) => void, setPlan: (s: semester[])=>void, setSemesterCnt: (s: number)=>void, setSeason: (s: string)=>void, setClassYear: (s: string)=>void}): JSX.Element {\n\n    const hide = () => setVisible(false);\n\n    function upload(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.currentTarget.files !== null){\n            const file = e.currentTarget.files[0];\n            const readfile = new FileReader();\n            readfile.readAsText(file);\n            readfile.onload = async(e) => {\n                const planCSV = e.target?.result;\n                const plsWork = String(planCSV);\n                parseData(plsWork);\n            };\n        } else {\n            return;\n        }\n    }\n\n    function parseData(csv: string) {\n        const headerEnd = csv.indexOf(\"\\n\");\n        let newPlanRaw: string[] = [];\n        let newLine: string;\n        let planCooking: importClass[] = [];\n        let parser = headerEnd;\n        let parserTmp = 0;\n\n        while (parser !== -1) {\n            parserTmp = csv.indexOf(\"\\n\",parser+1);\n            newLine = csv.slice(parser,parserTmp);\n            newPlanRaw = newPlanRaw.concat([newLine]);\n            parser = parserTmp;\n        }\n\n        newPlanRaw.forEach(c=>{\n            let parserStart = 1;\n            let parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemCnt = c.slice(parserStart,parserEnd);\n            const newSemCnt1 = parseInt(newSemCnt,10);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemYear = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemSeason = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newClassID = c.slice(parserStart+1,parserEnd);\n\n            if(!isNaN(newSemCnt1)) {\n                const newNode:importClass[] = [{cnt:newSemCnt1,year:newSemYear,season:newSemSeason,id:newClassID}];\n                planCooking = planCooking.concat(newNode);\n            }\n        });    \n        \n        saveUpload(planCooking);\n    }\n\n    function saveUpload(data: importClass[]) {\n        let semesterList: semester[] = [];\n        \n        let i = 0;\n        for (i;i<data[data.length-1].cnt;i++) {\n            const year = buildYear(i);\n            const season = buildSeason(i);\n            const semesterTemplate: semester = {\n                cnt:i+1,\n                year: year,\n                season: season,\n                courses: []\n            }; // create a template to build a semester\n            semesterList = semesterList.concat(semesterTemplate);\n        }\n        let totalCredits = 0;\n        data.forEach(d=>{\n            semesterList[d.cnt-1].season = d.season;\n            semesterList[d.cnt-1].year = d.year;\n\n            // Look up course \n            //courseData.filter(c=>c.id.indexOf(d.id));\n            const x: Class[] = courseMap[d.id.slice(0,4)].filter(c=>c.id.indexOf(d.id.slice(0,4))!==-1);\n            const creditNumber = x[0].credits;\n            const classFound:Class[] = [{id:x[0].id,name:x[0].name,description:x[0].description,credits:creditNumber,prereqs:x[0].prereqs, specreq:\"\"}];\n            \n            totalCredits += creditNumber;\n            removeSpecialReqCredits(classFound[0]);\n            \n            //successfully concatenates class from catalog to courseList\n            const courses = semesterList[d.cnt-1].courses.concat(classFound); // Concat found course to semester course list\n            semesterList[d.cnt-1].courses = courses;\n        });\n\n        credits.setGlobalCredits(totalCredits);\n        setSeason(semesterList[semesterList.length-1].season);\n        setSemesterCnt(semesterList[semesterList.length-1].cnt);\n        setClassYear(semesterList[semesterList.length-1].year);\n        setPlan(semesterList.map(s=>s));\n\n        hide();\n    }\n\n    function buildSeason(cnt: number):string {\n        if (cnt%2 !== 0) {\n            return \"Spring\";\n        } else {\n            return \"Fall\";\n        }\n    }\n\n    function buildYear(cnt: number):string {\n        if (cnt === 0 || cnt === 1) {\n            return \"Freshman\";\n        } else if (cnt === 2 || cnt === 3) {\n            return \"Sohpmore\";\n        } else if (cnt === 4 || cnt === 5) {\n            return \"Junior\";\n        } else {\n            return \"Senior\";\n        }\n    }\n\n    function removeSpecialReqCredits(course: Class){\n        if(course.specreq == \"Six additional credits of technical electives\"){\n            credits.setTechElectiveCredits(credits.techElectiveCredits-course.credits);\n        } else if (course.specreq == \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits-course.credits);\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={visible} onHide={hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload Plan</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <input className=\"csvUpload\" type=\"file\" onChange={upload}/>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={()=>{\n                        hide();\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n    \n}\n\n\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { semester } from \"./interfaces/semester\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { Class } from \"./interfaces/course\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\nimport { UploadSemesterModal } from \"./components/UploadSemesterModal\";\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_LISTOFCOURSELISTS = \"cisc-degree-listofcourseLists\"; \nexport const INITIAL_LISTOFCOURSELISTS: Class[][] = [[]];\n\nexport const INITIAL_SEMESTER: semester[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): Class[][] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_LISTOFCOURSELISTS);\n    if (rawList === null) {\n        return [...INITIAL_LISTOFCOURSELISTS];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(clear: boolean): semester[] {\n    if (clear === true) return [...INITIAL_SEMESTER];\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<semester[]>(getLocalStoragePlan(false));\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    const [uploadVisible, setUploadVisible] = useState<boolean>(false);\n    const [listOfCourseLists, setlistOfCourseLists] = useState<Class[][]>(getLocalStorageList());  \n    const [globalCredits, setGlobalCredits] = useState<number>(0);\n    const [techElectiveCredits, setTechElectiveCredits] = useState<number>(0);\n    const [focusAreaCredits, setFocusAreaCredits] = useState<number>(0);\n\n    const credits = {globalCredits, setGlobalCredits, techElectiveCredits, setTechElectiveCredits, focusAreaCredits, setFocusAreaCredits};\n    const lists = {listOfCourseLists, setlistOfCourseLists};\n\n    useEffect(() => {\n        console.log(`listOfCourseLists is : ${JSON.stringify(listOfCourseLists)}`);\n    },[listOfCourseLists]);\n\n    useEffect(() => {\n        let totalCreditsListener = 0;\n        currSemesters.forEach(s=>s.courses.forEach(c=>totalCreditsListener+=c.credits));      \n        setGlobalCredits(totalCreditsListener);  \n    });\n\n    function addSemester() {\n        //Adds semester to the list of semesters in the user's plan. Semester attributes set depending on the last semester attributes. \n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSememester:semester[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSememester));\n        const newList = [...listOfCourseLists];\n        newList.push([]);\n        setlistOfCourseLists(newList);\n    }\n\n    function resetCredits() {\n        setGlobalCredits(0);\n        setTechElectiveCredits(0);\n        setFocusAreaCredits(0);\n        if(currSemesters[0].courses.length > 0){\n            for(let i = 0; i < currSemesters[0].courses.length; i++){\n                setGlobalCredits(0+currSemesters[0].courses[i].credits);\n            }\n        }\n    }\n\n    function clearSemesters() { \n        //Clears all semesters except for the first. Resets plan to initial state. \n\n        const semesterReset: semester[] =  [\n            {\n                cnt: 1,        \n                year: \"Freshman\",\n                season: \"Fall\",\n                courses: []\n            }\n        ];\n        setCurrSemesters(semesterReset);\n        setCurrSemesters(getLocalStoragePlan(true));\n        setlistOfCourseLists([currSemesters[0].courses]);\n        resetCredits();\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n       \n    }\n\n    function popLists() {\n        const poppedList = [...listOfCourseLists];\n        poppedList.pop();\n        setlistOfCourseLists(poppedList);\n    }\n\n    function subtractCredits() {\n        console.log(listOfCourseLists);\n        for(let i = 0; i < listOfCourseLists[semesterCnt-1].length; i++){\n            setGlobalCredits(globalCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            if(listOfCourseLists[semesterCnt-1][i].specreq === \"Six additional credits of technical electives\"){\n                setTechElectiveCredits(techElectiveCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            } else if(listOfCourseLists[semesterCnt-1][i].specreq === \"12 credits for an approved focus area\") {\n                setFocusAreaCredits(focusAreaCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            }\n        }\n    }\n\n    function rmSemester() {\n        //Removes the last semester from the list.\n        if (semesterCnt === 1) {\n            return;\n        }\n        const popSemester:semester[] = currSemesters.map(c=>c);\n        popSemester.pop();\n        setCurrSemesters(popSemester);\n        setClassYear(popSemester[popSemester.length-1].year);\n        setSeason(popSemester[popSemester.length-1].season);\n        setSemesterCnt(popSemester[popSemester.length-1].cnt);\n        subtractCredits();\n        popLists();\n    }\n\n    function saveData() {\n        //Saves list of semesters and courselist to local storage.\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(listOfCourseLists));\n    }\n\n    function showDegreeReq(){\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    function prepCSV(c: Class): string {\n        let i = 0;\n        const len = c.description.length;\n        let newDes = \"\";\n        for (i;i<len;i++){\n            newDes += c.description[i].replace(\",\",\";\"); \n        }\n        return newDes;\n    }\n\n    function exportDataFromCSV() {\n        const csvCols = [\"Semester Num\", \"Semester Year\", \"Semester Season\", \"CourseID\", \"Course Name\", \"Course Description\", \"Credits\"];\n        const content = currSemesters.map(s => [\n            [s.courses.map(c=>[s.cnt,s.year,s.season,c.id,c.name,prepCSV(c),c.credits,]).join(\" \\n \")]\n        ].join(\"\\n\")).join(\"\\n\");\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvCols + \"\\n\" + content;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"my_plan.csv\");\n        document.body.appendChild(link); \n        link.click();\n    }\n\n    function importDataFromCSV() {\n        setUploadVisible(true);\n    }\n\n    function buildCurrSemesters(data: semester[]) {\n        let newClassList: Class [][] = [];\n        let totalCredits = 0;\n        data.map((semesters)=>{\n            newClassList = newClassList.concat([semesters.courses]);\n            semesters.courses.forEach(c=>totalCredits+=c.credits);\n        });\n        \n        setlistOfCourseLists(newClassList);\n\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(data));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(newClassList));\n\n        const newSemesterList = data.map(s=>s);\n        setCurrSemesters(newSemesterList);\n        window.location.reload();\n    }\n\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button data-testid=\"degree-button\" onClick={()=>{\n                showDegreeReq(); //console.log(listOfCourseLists);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} setVisible={setAllDegreeReqVisible} listOfCourseLists={listOfCourseLists} credits={credits}></AllDegreeReqs>\n            <Button className=\"semesterControls\" data-testid=\"add-sem-button\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" data-testid=\"remove-sem-button\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" data-testid=\"save-local-storage\" onClick={saveData}>Save Schedule</Button>\n            <Button className=\"saveData\" onClick={exportDataFromCSV}>Download Plan</Button>\n            <Button className=\"saveData\" onClick={importDataFromCSV}>Upload Schedule</Button>\n            <UploadSemesterModal credits={credits} visible={uploadVisible} setVisible={setUploadVisible} setPlan={(data) => buildCurrSemesters(data)} setSemesterCnt={setSemesterCnt} setClassYear={setClassYear} setSeason={setSeason}></UploadSemesterModal>\n            <Row className=\"semesterRows\">\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n//\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}