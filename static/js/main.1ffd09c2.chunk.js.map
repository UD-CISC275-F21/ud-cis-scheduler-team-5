{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/SpecialDegreeReqs.tsx","components/AllDegreeReqs.tsx","components/UploadSemesterModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","lists","semesterCnt","credits","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","prevReq","setPrevReq","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","filter","reqs","includes","map","req","Item","onClick","handleReqClick","Footer","Button","editClass","cIdx","index","length","newClasses","setTechElectiveCredits","techElectiveCredits","copyTechList","listOfTechElectives","techList","techcourses","setListOfTechElectives","setFocusAreaCredits","focusAreaCredits","copyFocusList","listOfFocusClasses","focusList","focuscourses","setlistOfCourseLists","setListOfFocusClasses","copyList","listOfCourseLists","courseList","courses","Course","course","currCourses","setCurrCourses","newCourses","concat","i","setGlobalCredits","globalCredits","removelistOfCourseLists","removeTechElectives","removeFocusClasses","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","courseID","slice","rawCourseId","split","newCourse","title","substr","parseInt","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","handleDeptClick","selectedDept","deptCourses","handleIDClick","cID","getPrereqs","selectedCourse","console","log","loc","tmp","undefined","addlistOfCourseLists","c","size","Row","Col","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","validCourses","handleCourseSearch","xs","newClass","j","k","saveAdd","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","setCurrClasses","Table","striped","bordered","colSpan","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","Text","SpecialDegreeReqs","displayWhich","AllDegreeReqs","checkDegreeReq","aReq","checkSpecialReq","displayWhichReq","UploadSemesterModal","setPlan","setSemesterCnt","parseData","csv","newLine","headerEnd","indexOf","newPlanRaw","planCooking","parser","parserTmp","parserStart","parserEnd","newSemCnt","newSemCnt1","newSemYear","newSemSeason","newClassID","isNaN","newNode","cnt","year","data","semesterList","semesterTemplate","buildYear","buildSeason","d","classes","creditNumber","classFound","saveUpload","type","e","currentTarget","files","file","readfile","FileReader","readAsText","onload","planCSV","result","String","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_LISTOFCOURSELISTS","INITIAL_LISTOFCOURSELISTS","INITIAL_SEMESTER","getLocalStoragePlan","clear","rawSchedule","localStorage","getItem","JSON","parse","App","currSemesters","setCurrSemesters","allDegreeReqVisible","setAllDegreeReqVisible","uploadVisible","setUploadVisible","rawList","getLocalStorageList","prepCSV","newDes","replace","useEffect","stringify","newSeason","newYear","newSem","newList","newTechList","newFocusList","semesterReset","semPop","pop","subtractCredits","poppedList","poppedTechList","poppedFocusList","popLists","setItem","content","s","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","window","location","reload","buildCurrSemesters","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ffd09c2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n    const [prevReq, setPrevReq] = useState<string>(\"\");\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n\n        if(reqId === \"Six additional credits of technical electives\"){    //Yeah if I was a TA I would not want to read any of this\n            credits.setTechElectiveCredits(credits.techElectiveCredits+editClass.credits);\n            const copyTechList: Class[][] = lists.listOfTechElectives.map(techList => [...techList]);\n            copyTechList[semesterCnt-1] = [...copyTechList[semesterCnt-1].filter(techcourses => techcourses.id != ogClass.id), editClass];\n            lists.setListOfTechElectives(copyTechList);\n            if(prevReq === \"12 credits for an approved focus area\") {  \n                credits.setFocusAreaCredits(credits.focusAreaCredits-editClass.credits);   //remove credits from focus area if you switched from focus area to tech electives\n                const copyFocusList: Class[][] = lists.listOfFocusClasses.map(focusList=> [...focusList]);\n                copyFocusList[semesterCnt-1] = copyFocusList[semesterCnt-1].filter(focuscourses => focuscourses.id != ogClass.id);\n                lists.setlistOfCourseLists(copyFocusList);\n            }\n        } else if (reqId === \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits+editClass.credits);\n            const copyFocusList: Class[][] = lists.listOfFocusClasses.map(focusList => [...focusList]);\n            copyFocusList[semesterCnt-1] = [...copyFocusList[semesterCnt-1].filter(focuscourses => focuscourses.id != ogClass.id), editClass];\n            lists.setListOfFocusClasses(copyFocusList);\n            if(prevReq === \"Six additional credits of technical electives\"){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-editClass.credits); //vice versa of above case\n                const copyTechList: Class[][] = lists.listOfTechElectives.map(techList=> [...techList]);\n                copyTechList[semesterCnt-1] = copyTechList[semesterCnt-1].filter(techcourses => techcourses.id != ogClass.id);\n                lists.setlistOfCourseLists(copyTechList);\n            }\n        }\n\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList => [...courseList]); //Something about this is broken\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1].filter(courses => courses.id != ogClass.id), editClass];\n        lists.setlistOfCourseLists(copyList);\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n\n    function handleReqClick(req: string) { \n        setPrevReq(reqId);\n        setReqId(req); \n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" aria-label=\"course-id-input\" rows={1}\n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR([ev.target.value])}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key={req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\n//import { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, lists, semesterCnt, credits} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    \n    function editCourse():void{\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id === course.id){\n                //removelistOfCourseLists(currCourses[index].id);\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        removelistOfCourseLists();\n        removeTechElectives();\n        removeFocusClasses();\n        setCurrCourses(newCourses);\n    }\n\n    function removelistOfCourseLists() { \n        for(let i = 0; i < lists.listOfCourseLists[semesterCnt-1].length; i++){\n            if(lists.listOfCourseLists[semesterCnt-1][i].id === course.id) {\n                credits.setGlobalCredits(credits.globalCredits - lists.listOfCourseLists[semesterCnt-1][i].credits);\n                const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n                copyList[semesterCnt-1] = copyList[semesterCnt-1].filter(courses => courses.id != course.id);\n                lists.setlistOfCourseLists(copyList);\n                break;\n            }\n        }\n    }\n\n    function removeTechElectives(){\n        for(let i = 0; i < lists.listOfTechElectives[semesterCnt-1].length; i++){\n            if(lists.listOfTechElectives[semesterCnt-1][i].id === course.id && credits.techElectiveCredits !== 0){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-lists.listOfTechElectives[semesterCnt-1][i].credits);\n                const copyTechList: Class[][] = lists.listOfTechElectives.map(techList=> [...techList]);\n                copyTechList[semesterCnt-1] = copyTechList[semesterCnt-1].filter(techcourses => techcourses.id != course.id);\n                lists.setlistOfCourseLists(copyTechList);\n                break;\n            }\n        }\n    }\n\n    function removeFocusClasses(){\n        for(let i = 0; i < lists.listOfFocusClasses[semesterCnt-1].length; i++){\n            if(lists.listOfFocusClasses[semesterCnt-1][i].id === course.id && credits.focusAreaCredits !== 0){\n                credits.setFocusAreaCredits(credits.focusAreaCredits-lists.listOfFocusClasses[semesterCnt-1][i].credits);\n                const copyFocusList: Class[][] = lists.listOfFocusClasses.map(focusList=> [...focusList]);\n                copyFocusList[semesterCnt-1] = copyFocusList[semesterCnt-1].filter(focuscourses => focuscourses.id != course.id);\n                lists.setlistOfCourseLists(copyFocusList);\n                break;\n            }\n        }\n    }\n    return (\n        <tr>\n            <td>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </td>\n            <td data-testid=\"course-id\">{course.id} {course.name}</td>\n            {//<td>{course.name}</td>\n            }\n            <td>{course.credits}</td>\n            <td><button onClick={editCourse}>Edit</button></td>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </tr>\n    );\n\n    /*\n    return (\n        <Row>\n            <Col>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </Col>\n            <Col data-testid=\"course-id\">{course.id}</Col>\n            <Col>{course.name}</Col>\n            <Col>{course.credits}</Col>\n            <Col><button onClick={editCourse}>Edit</button></Col>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </Row>\n\n            \n    );\n    */\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Class Year</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-class-year\"\n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Season Semester</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-season\"\n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.courseID.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const rawCourseId = course.courseID.split(\" \");\n    const courseId = rawCourseId[0] + rawCourseId[1];\n    const newCourse:Class = { id:courseId, name:course.title.substr(11), credits:parseInt(course.credits), \n        description:course.description, prereqs:course.prereqs };\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"Course Description\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>([\"Course Prerequisite IDs\"]);\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR};\n        const prereqs = getPrereqs(courseId);\n\n        if(prereqs[0] === \"000\"){//This is an error code if the the inputted course is not found in courseMap\n            setErrorAddCourse(true);\n            console.log(\"That's an unrecognized course\");\n        }else if(prereqs[0] === \"N/A\" || prereqs[0] === \"\" || prereqs.length===0){\n            setCurrCourse(newClasses.concat(newClass));\n            credits.setGlobalCredits(credits.globalCredits+courseCred);\n            addlistOfCourseLists(newClass);\n            hide();\n        }else{\n            let loc = -1;\n            for(let i = 0; i < lists.listOfCourseLists.length-1; i++){\n                for(let j = 0; j < lists.listOfCourseLists[i].length; j++){\n                    for(let k = 0; k < prereqs.length; k++){\n                        console.log(\"Checking course: \", lists.listOfCourseLists[i][j]);\n                        if(lists.listOfCourseLists[i][j].id === prereqs[k]){\n                            loc = i;\n                        }\n                    }\n                }\n            }\n            if(loc != -1){\n                setCoursePreR(prereqs);\n                setCurrCourse(newClasses.concat(newClass));\n                credits.setGlobalCredits(credits.globalCredits+courseCred);\n                addlistOfCourseLists(newClass);\n                hide();\n            }else{\n                setErrorAddCourse(true);\n                console.log(\"Can't add that course yet!\");\n            }  \n        }\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Course Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseName(\"Course Name\");\n        setCourseDesc(\"Course Description\");\n        setCourseCred(0);\n        setCoursePreR([\"\"]);\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":[\"None\"]}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1 && len === 4){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        if(courseMap[partOfID.slice(0,4)] === undefined){\n            console.log(\"Not a valid department\");\n        }else{\n            const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n            if(validCourses.length === 1 && len === 7){\n                handleIDClick(validCourses[0].id);\n            }\n            setVisibleCourses(validCourses);\n        }\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        setCourseId(\"Course ID\");\n        setDeptSearch(selectedDept);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        setErrorAddCourse(false);\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(getPrereqs(visibleCourses[cIdx].id));\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string[]{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                console.log(\"Course is in the list\");\n                loc = i;\n                break;\n            }\n        }\n        let prereqs:string[];\n        if(loc !== -1){\n            prereqs = deptCourses[loc].prereqs;\n            for(let i = 0; i < prereqs.length; i++){\n                const tmp = prereqs[i].split(\" \");\n                if(tmp[1] === undefined){\n                    prereqs[i] = tmp[0];\n                }else{\n                    console.log(\"idx 0: \", tmp[0], \"\\tidx1: \", tmp[1]);\n                    prereqs[i] = tmp[0] + tmp[1];\n                }\n            }\n        }else{\n            prereqs = [\"N/A\"];\n        }\n        console.log(\"Prereqs: \", prereqs, \"\\tLength: \", prereqs.length);\n        return prereqs;\n    }\n\n\n    function addlistOfCourseLists(c: Class){\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1], c];\n        lists.setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\" data-testid=\"dept-dropdown\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\" data-testid=\"dept-drop-menu\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu data-testid=\"course-drop-menu\">\n                                {visibleCourses.map(c =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"add-course-button\" variant=\"primary\" onClick={()=>{\n                    saveAdd(); \n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { sem } from \"../interfaces/sem\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, lists, semesterCnt, credits}: \n    {semester: sem, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(\"____ Year\");\n    const [season,setSeason] = React.useState<string>(\"____ Semester\");\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    //console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return (\n        <div>\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Table striped bordered size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Remove</th>\n                        <th>Course</th>\n                        {//<th>Course Name</th>\n                        }\n                        <th>Credits</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {currClasses.map(c=> {\n                        return (\n                            <Course key = {c.id} course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                        );\n                    })\n                    }\n                    <tr>\n                        <td colSpan={5}><Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button></td>\n                    </tr>\n                </tbody>\n                <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n            </Table>\n        </div>\n    );\n        \n    /*\n\n    return <BootstrapCard className=\"border-dark\">\n        <Col>\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Row>\n                <Col><strong>Remove Course</strong></Col>\n                <Col><strong>Course ID</strong></Col>\n                <Col><strong>Course Name</strong></Col>\n                <Col><strong>Credits</strong></Col>\n                <Col><strong>Edit Course</strong></Col>\n            </Row>\n\n            {currClasses.map(c => {\n                return (\n                    <Row key = {c.id}>\n                        <Course course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                    </Row>\n                );\n            })\n            }\n            <p></p>\n            <Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button>\n            <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n        </Col>\n    </BootstrapCard>;\n    */\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\nexport function SpecialDegreeReqs({requirement, fulfilled, displayWhich, credits}: \n    {requirement: string, fulfilled: boolean, displayWhich: boolean, credits: creditsHandlers}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}</BootstrapCard.Text>\n                <BootstrapCard.Text> {displayWhich ? credits.techElectiveCredits + \" out of 6\" : credits.focusAreaCredits + \" out of 12\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport { SpecialDegreeReqs } from \"../components/SpecialDegreeReqs\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { Button, Modal, Table} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n\n\nexport function AllDegreeReqs({visible, setVisible, listOfCourseLists, credits}: \n    {visible: boolean, setVisible: (v: boolean)=>void , listOfCourseLists: Class[][], credits: creditsHandlers}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        let j = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            for(j = 0; j < listOfCourseLists[i].length; j++){\n                if(aReq.id.includes(listOfCourseLists[i][j].id)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function checkSpecialReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\" && credits.techElectiveCredits === 6){\n            return true;\n        } else if(aReq.id === \"12 credits for an approved focus area\" && credits.focusAreaCredits === 12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function displayWhichReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\"){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function hide(){\n        setVisible(!visible);\n    }\n\n    return <Modal show={visible}>\n        <Modal.Header>\n            <Modal.Title>Degree Requirements</Modal.Title>\n            <Button onClick={hide}>Close</Button>\n        </Modal.Header>\n        \n        <strong className=\"degree-subtitle\">Credit Count: {credits.globalCredits} out of 124 needed</strong>\n        <Table data-testid=\"degreeReqs\">\n            <th className=\"degree-subtitle\">Core Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CISC\") || reqs.id.includes(\"MATH\") || reqs.id.includes(\"ENGL\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Special Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map((aReq: DegreeReq) => {\n                    return (\n                        <SpecialDegreeReqs key={aReq.id} requirement={aReq.id} fulfilled={checkSpecialReq(aReq)} displayWhich={displayWhichReq(aReq)} credits={credits}></SpecialDegreeReqs> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <strong className=\"degree-subtitle\">Science Requirements</strong>\n        <Table> \n            <th className=\"degree-subtitle\">Option 1</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"PHYS\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 2</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CHEM\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 3</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"BISC\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 4</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL105\") || reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL115\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 5</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL110\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n    </Modal>;\n}","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport {sem} from \"../interfaces/sem\";\nimport { importClass } from \"../interfaces/importPlan\";\nimport classes from \"../assets/classes.json\";\nimport { Class } from \"../interfaces/course\";\n\n\n//export function UploadSemesterModal({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void, plan: sem[], setPlan: (s: sem[])=>void}): JSX.Element {\nexport function UploadSemesterModal({visible, setVisible, setPlan, listOfCourseLists, setSemesterCnt, setSeason, setClassYear}: \n    {visible: boolean, setVisible: (b: boolean) => void, setPlan: (s: sem[])=>void, listOfCourseLists: Class[][], setSemesterCnt: (s: number)=>void, setSeason: (s: string)=>void, setClassYear: (s: string)=>void}): JSX.Element {\n\n\n    const hide = () => setVisible(false);\n\n    function upload(e: React.ChangeEvent<HTMLInputElement>) {\n        //resetPlan();\n        if (e.currentTarget.files !== null){\n            const file = e.currentTarget.files[0];\n            //console.log(file);\n            const readfile = new FileReader();\n            readfile.readAsText(file);\n            readfile.onload = async(e) => {\n                //console.log(e.target?.result);\n                const planCSV = e.target?.result;\n                const plsWork = String(planCSV);\n                parseData(plsWork);\n            };\n        } else {\n            return;\n        }\n    }\n\n    function parseData(csv: string) {\n        const headerEnd = csv.indexOf(\"\\n\");\n        let newPlanRaw: string[] = [];\n        let newLine: string;\n        let planCooking: importClass[] = [];\n        let parser = headerEnd;\n        let parserTmp = 0;\n\n        while (parser !== -1) {\n            parserTmp = csv.indexOf(\"\\n\",parser+1);\n            newLine = csv.slice(parser,parserTmp);\n            newPlanRaw = newPlanRaw.concat([newLine]);\n            parser = parserTmp;\n        }\n\n        newPlanRaw.forEach(c=>{\n            let parserStart = 1;\n            let parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemCnt = c.slice(parserStart,parserEnd);\n            const newSemCnt1 = parseInt(newSemCnt,10);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemYear = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemSeason = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newClassID = c.slice(parserStart+1,parserEnd);\n\n            if(!isNaN(newSemCnt1)) {\n                const newNode:importClass[] = [{cnt:newSemCnt1,year:newSemYear,season:newSemSeason,id:newClassID}];\n                planCooking = planCooking.concat(newNode);\n            }\n            \n        });    \n        \n        saveUpload(planCooking);\n    }\n\n    function saveUpload(data: importClass[]) {\n        let semesterList: sem[] = [];\n        //console.log(data[data.length-1].cnt);\n        let i = 0;\n        console.log(data);\n        //console.log(data[data.length-1].cnt+1);\n        for (i;i<data[data.length-1].cnt;i++) {\n            console.log(i+1);\n            const year = buildYear(i);\n            const season = buildSeason(i);\n            const semesterTemplate: sem = {\n                cnt:i+1,\n                year: year,\n                season: season,\n                courses: []\n            }; // create a template to build a semester\n            console.log(semesterTemplate);\n            semesterList = semesterList.concat(semesterTemplate);\n        }\n\n        data.forEach(d=>{\n            console.log(semesterList);\n            console.log(data);\n            semesterList[d.cnt-1].season = d.season;\n            semesterList[d.cnt-1].year = d.year;\n\n            // Look up course \n\n            classes.filter(c=>c.id.indexOf(d.id));\n            const x = classes.filter(c=>\n                c.id.indexOf(d.id)!==-1);\n            console.log(x);\n            const creditNumber = x[0].credits;\n            const classFound:Class[] = [{id:x[0].id,name:x[0].name,description:x[0].description,credits:creditNumber,prereqs:x[0].prereqs}];\n            \n            //successfully concatenates class from catalog to courseList\n\n            console.log(listOfCourseLists);\n            console.log(listOfCourseLists[0][0]);\n            console.log(d.cnt);\n\n            console.log(semesterList[d.cnt-1]);\n\n            const courses = semesterList[d.cnt-1].courses.concat(classFound); // Concat found course to semester course list\n            \n            semesterList[d.cnt-1].courses = courses;\n\n            console.log(semesterList[d.cnt-1].courses);\n\n            console.log(semesterList);\n            \n            console.log(\"-----------------------------\");\n        });\n\n        setSeason(semesterList[semesterList.length-1].season);\n        setSemesterCnt(semesterList[semesterList.length-1].cnt);\n        setClassYear(semesterList[semesterList.length-1].year);\n        setPlan(semesterList);\n        hide();\n        return 1;\n    }\n\n    function buildSeason(cnt: number):string {\n        if (cnt%2 !== 0) {\n            return \"Spring\";\n        } else {\n            return \"Fall\";\n        }\n    }\n\n    function buildYear(cnt: number):string {\n        if (cnt === 0 || cnt === 1) {\n            return \"Freshman\";\n        } else if (cnt === 2 || cnt === 3) {\n            return \"Sohpmore\";\n        } else if (cnt === 4 || cnt === 5) {\n            return \"Junior\";\n        } else {\n            return \"Senior\";\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={visible} onHide={hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload Plan</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <input className=\"csvUpload\" type=\"file\" onChange={upload}/>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={()=>{\n                        hide();\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n    \n}\n\n\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { sem } from \"./interfaces/sem\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { Class } from \"./interfaces/course\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\nimport { UploadSemesterModal } from \"./components/UploadSemesterModal\";\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_LISTOFCOURSELISTS = \"cisc-degree-listofcourseLists\"; \nexport const INITIAL_LISTOFCOURSELISTS: Class[][] = [[]];\n\nexport const INITIAL_SEMESTER: sem[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): Class[][] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_LISTOFCOURSELISTS);\n    if (rawList === null) {\n        return [...INITIAL_LISTOFCOURSELISTS];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(clear: boolean): sem[] {\n    if (clear === true) return [...INITIAL_SEMESTER];\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<sem[]>(getLocalStoragePlan(false));\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    const [uploadVisible, setUploadVisible] = useState<boolean>(false);\n    \n    const [listOfCourseLists, setlistOfCourseLists] = useState<Class[][]>(getLocalStorageList());  \n    const [listOfTechElectives, setListOfTechElectives] = useState<Class[][]>([[]]);\n    const [listOfFocusClasses, setListOfFocusClasses] = useState<Class[][]>([[]]);\n   \n    const [globalCredits, setGlobalCredits] = useState<number>(0);\n    const [techElectiveCredits, setTechElectiveCredits] = useState<number>(0);\n    const [focusAreaCredits, setFocusAreaCredits] = useState<number>(0);\n\n    const credits = {globalCredits, setGlobalCredits, techElectiveCredits, setTechElectiveCredits, focusAreaCredits, setFocusAreaCredits};\n    const lists = {listOfCourseLists, setlistOfCourseLists, listOfTechElectives, setListOfTechElectives, listOfFocusClasses, setListOfFocusClasses};\n\n    useEffect(() => {\n        console.log(`listOfCourseLists is : ${JSON.stringify(listOfCourseLists)}`);\n    },[listOfCourseLists]);\n\n    useEffect(() => {\n        console.log(`listOfTechElectives is : ${JSON.stringify(listOfTechElectives)}`);\n    },[listOfTechElectives]);\n\n    useEffect(() => {\n        console.log(`listOfFocusClasses is : ${JSON.stringify(listOfFocusClasses)}`);\n    },[listOfFocusClasses]);\n\n    function addSemester() {\n        //Adds semester to the list of semesters in the user's plan. Semester attributes set depending on the last semester attributes. \n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSem:sem[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSem));\n        const newList = [...listOfCourseLists];\n        const newTechList = [...listOfTechElectives];\n        const newFocusList = [...listOfFocusClasses];\n        newList.push([]);\n        newTechList.push([]);\n        newFocusList.push([]);\n        setlistOfCourseLists(newList);\n        setListOfTechElectives(newTechList);\n        setListOfFocusClasses(newFocusList);\n    }\n\n    function clearSemesters() {\n        //Clears all semesters except for the first. Resets plan to initial state. \n\n        const semesterReset: sem[] =  [\n            {\n                cnt: 1,        \n                year: \"Freshman\",\n                season: \"Fall\",\n                courses: []\n            }\n        ];\n\n\n        console.log(semesterReset);\n\n        setCurrSemesters(semesterReset);\n\n        console.log(getLocalStoragePlan(true));\n\n        setlistOfCourseLists(INITIAL_LISTOFCOURSELISTS);\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n    }\n\n    console.log(currSemesters);\n\n    function popLists() {\n        const poppedList = [...listOfCourseLists];\n        const poppedTechList = [...listOfTechElectives];\n        const poppedFocusList = [...listOfFocusClasses];\n        poppedList.pop();\n        poppedTechList.pop();\n        poppedFocusList.pop();\n        setlistOfCourseLists(poppedList);\n        setListOfTechElectives(poppedTechList);\n        setListOfFocusClasses(poppedFocusList);\n    }\n\n    function subtractCredits() {\n        for(let i = 0; i < listOfCourseLists[semesterCnt-1].length; i++){\n            setGlobalCredits(globalCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            for(let j = 0; j < listOfTechElectives[semesterCnt-1].length; j++){\n                if(listOfTechElectives[semesterCnt-1][j].id === listOfCourseLists[semesterCnt-1][i].id){\n                    setTechElectiveCredits(techElectiveCredits-listOfTechElectives[semesterCnt-1][j].credits);\n                }\n            }\n            for(let k = 0; k < listOfFocusClasses[semesterCnt-1].length; k++){\n                if(listOfFocusClasses[semesterCnt-1][k].id === listOfCourseLists[semesterCnt-1][i].id){\n                    setFocusAreaCredits(focusAreaCredits-listOfFocusClasses[semesterCnt-1][k].credits);\n                }\n            }\n        }\n    }\n\n    function rmSemester() {\n        //Removes the last semester from the list.\n        if (semesterCnt === 1) {\n            return;\n        }\n        const semPop:sem[] = currSemesters;\n        semPop.pop();\n        setCurrSemesters(semPop);\n        setClassYear(semPop[semPop.length-1].year);\n        setSeason(semPop[semPop.length-1].season);\n        setSemesterCnt(semPop[semPop.length-1].cnt);\n        subtractCredits();\n        popLists();\n    }\n\n    function saveData() {\n        //Saves list of semesters and courselist to local storage.\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(listOfCourseLists));\n    }\n\n    function showDegreeReq(){\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    function prepCSV(c: Class): string {\n        let i = 0;\n        const len = c.description.length;\n        let newDes = \"\";\n        for (i;i<len;i++){\n            newDes += c.description[i].replace(\",\",\";\"); \n        }\n        return newDes;\n    }\n\n    function exportDataFromCSV() {\n        const csvCols = [\"Semester Num\", \"Semester Year\", \"Semester Season\", \"CourseID\", \"Course Name\", \"Course Description\", \"Credits\"];\n        const content = currSemesters.map(s => [\n            [s.courses.map(c=>[s.cnt,s.year,s.season,c.id,c.name,prepCSV(c),c.credits,]).join(\" \\n \")]\n        ].join(\"\\n\")).join(\"\\n\");\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvCols + \"\\n\" + content;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        \n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"my_plan.csv\");\n        document.body.appendChild(link); \n        link.click();\n    }\n\n    function importDataFromCSV() {\n        setUploadVisible(true);\n        return 0;\n    }\n\n    function buildCurrSemesters(data: sem[]) {\n        console.log(data);\n        let i = 0;\n        let newList: string[][] = [[]];\n\n\n\n        for (i=0;i<data.length-1;i++) {\n            newList = newList.concat([[]]);\n        }\n        for (i=0;i<data.length;i++){\n            console.log(data[i].cnt);\n            newList[i] = data[i].courses.map(c=>c.id);\n        }\n        \n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(data));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(newList));\n        window.location.reload();\n    }\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button data-testid=\"degree-button\" onClick={()=>{\n                showDegreeReq(); //console.log(listOfCourseLists);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} setVisible={setAllDegreeReqVisible} listOfCourseLists={listOfCourseLists} credits={credits}></AllDegreeReqs>\n            <Button className=\"semesterControls\" data-testid=\"add-sem-button\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" data-testid=\"remove-sem-button\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" data-testid=\"save-local-storage\" onClick={saveData}>Save Schedule</Button>\n            <Button className=\"saveData\" onClick={exportDataFromCSV}>Download Plan</Button>\n            <Button className=\"saveData\" onClick={importDataFromCSV}>Upload Schedule</Button>\n            <UploadSemesterModal visible={uploadVisible} setVisible={setUploadVisible} setPlan={(data)=>buildCurrSemesters(data)} listOfCourseLists={listOfCourseLists} setSemesterCnt={setSemesterCnt} setClassYear={setClassYear} setSeason={setSeason} ></UploadSemesterModal>\n            <Row className=\"semesterRows\">\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n//\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}