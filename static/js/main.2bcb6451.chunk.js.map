{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/SpecialDegreeReqs.tsx","components/AllDegreeReqs.tsx","components/UploadSemesterModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","lists","semesterCnt","credits","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","prevReq","setPrevReq","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","filter","reqs","includes","map","req","Item","onClick","handleReqClick","Footer","Button","editClass","cIdx","index","length","newClasses","setTechElectiveCredits","techElectiveCredits","copyTechList","listOfTechElectives","techList","techcourses","setListOfTechElectives","setFocusAreaCredits","focusAreaCredits","copyFocusList","listOfFocusClasses","focusList","focuscourses","setlistOfCourseLists","setListOfFocusClasses","copyList","listOfCourseLists","courseList","courses","Course","course","currCourses","setCurrCourses","console","log","newCourses","concat","i","setGlobalCredits","globalCredits","removelistOfCourseLists","removeTechElectives","removeFocusClasses","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","slice","newCourse","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","saveAdd","newClass","c","addlistOfCourseLists","handleDeptClick","selectedDept","deptCourses","handleIDClick","cID","selectedCourse","getPrereqs","size","Row","Col","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","undefined","validCourses","handleCourseSearch","xs","style","color","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","setCurrClasses","Table","striped","bordered","colSpan","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","Text","SpecialDegreeReqs","displayWhich","AllDegreeReqs","checkDegreeReq","aReq","j","checkSpecialReq","displayWhichReq","UploadSemesterModal","setPlan","setSemesterCnt","parseData","csv","newLine","headerEnd","indexOf","newPlanRaw","planCooking","parser","parserTmp","parserStart","parserEnd","newSemCnt","newSemCnt1","parseInt","newSemYear","newSemSeason","newClassID","isNaN","newNode","cnt","year","data","semesterList","semesterTemplate","buildYear","buildSeason","d","creditNumber","classFound","saveUpload","type","e","currentTarget","files","file","readfile","FileReader","readAsText","onload","planCSV","result","String","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_LISTOFCOURSELISTS","INITIAL_LISTOFCOURSELISTS","INITIAL_SEMESTER","getLocalStoragePlan","clear","rawSchedule","localStorage","getItem","JSON","parse","App","currSemesters","setCurrSemesters","allDegreeReqVisible","setAllDegreeReqVisible","uploadVisible","setUploadVisible","rawList","getLocalStorageList","prepCSV","newDes","replace","useEffect","stringify","newSeason","newYear","newSememester","newList","newTechList","newFocusList","semPop","pop","k","subtractCredits","poppedList","poppedTechList","poppedFocusList","popLists","setItem","content","s","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","newSemesterList","semesters","window","location","reload","buildCurrSemesters","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2bcb6451.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n    const [prevReq, setPrevReq] = useState<string>(\"\");\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n\n        if(reqId === \"Six additional credits of technical electives\"){    //Yeah if I was a TA I would not want to read any of this\n            credits.setTechElectiveCredits(credits.techElectiveCredits+editClass.credits);\n            const copyTechList: Class[][] = lists.listOfTechElectives.map(techList => [...techList]);\n            copyTechList[semesterCnt-1] = [...copyTechList[semesterCnt-1].filter(techcourses => techcourses.id != ogClass.id), editClass];\n            lists.setListOfTechElectives(copyTechList);\n            if(prevReq === \"12 credits for an approved focus area\") {  \n                credits.setFocusAreaCredits(credits.focusAreaCredits-editClass.credits);   //remove credits from focus area if you switched from focus area to tech electives\n                const copyFocusList: Class[][] = lists.listOfFocusClasses.map(focusList=> [...focusList]);\n                copyFocusList[semesterCnt-1] = copyFocusList[semesterCnt-1].filter(focuscourses => focuscourses.id != ogClass.id);\n                lists.setlistOfCourseLists(copyFocusList);\n            }\n        } else if (reqId === \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits+editClass.credits);\n            const copyFocusList: Class[][] = lists.listOfFocusClasses.map(focusList => [...focusList]);\n            copyFocusList[semesterCnt-1] = [...copyFocusList[semesterCnt-1].filter(focuscourses => focuscourses.id != ogClass.id), editClass];\n            lists.setListOfFocusClasses(copyFocusList);\n            if(prevReq === \"Six additional credits of technical electives\"){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-editClass.credits); //vice versa of above case\n                const copyTechList: Class[][] = lists.listOfTechElectives.map(techList=> [...techList]);\n                copyTechList[semesterCnt-1] = copyTechList[semesterCnt-1].filter(techcourses => techcourses.id != ogClass.id);\n                lists.setlistOfCourseLists(copyTechList);\n            }\n        }\n\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList => [...courseList]); //Something about this is broken\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1].filter(courses => courses.id != ogClass.id), editClass];\n        lists.setlistOfCourseLists(copyList);\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n\n    function handleReqClick(req: string) { \n        setPrevReq(reqId);\n        setReqId(req); \n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" aria-label=\"course-id-input\" rows={1}\n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key={req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\n//import { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, lists, semesterCnt, credits} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    \n    function editCourse():void{\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id === course.id){\n                //removelistOfCourseLists(currCourses[index].id);\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        removelistOfCourseLists();\n        removeTechElectives();\n        removeFocusClasses();\n        setCurrCourses(newCourses);\n    }\n\n    function removelistOfCourseLists() { \n        for(let i = 0; i < lists.listOfCourseLists[semesterCnt-1].length; i++){\n            if(lists.listOfCourseLists[semesterCnt-1][i].id === course.id) {\n                credits.setGlobalCredits(credits.globalCredits - lists.listOfCourseLists[semesterCnt-1][i].credits);\n                const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n                copyList[semesterCnt-1] = copyList[semesterCnt-1].filter(courses => courses.id != course.id);\n                lists.setlistOfCourseLists(copyList);\n                break;\n            }\n        }\n    }\n\n    function removeTechElectives(){\n        for(let i = 0; i < lists.listOfTechElectives[semesterCnt-1].length; i++){\n            if(lists.listOfTechElectives[semesterCnt-1][i].id === course.id && credits.techElectiveCredits !== 0){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-lists.listOfTechElectives[semesterCnt-1][i].credits);\n                const copyTechList: Class[][] = lists.listOfTechElectives.map(techList=> [...techList]);\n                copyTechList[semesterCnt-1] = copyTechList[semesterCnt-1].filter(techcourses => techcourses.id != course.id);\n                lists.setlistOfCourseLists(copyTechList);\n                break;\n            }\n        }\n    }\n\n    function removeFocusClasses(){\n        for(let i = 0; i < lists.listOfFocusClasses[semesterCnt-1].length; i++){\n            if(lists.listOfFocusClasses[semesterCnt-1][i].id === course.id && credits.focusAreaCredits !== 0){\n                credits.setFocusAreaCredits(credits.focusAreaCredits-lists.listOfFocusClasses[semesterCnt-1][i].credits);\n                const copyFocusList: Class[][] = lists.listOfFocusClasses.map(focusList=> [...focusList]);\n                copyFocusList[semesterCnt-1] = copyFocusList[semesterCnt-1].filter(focuscourses => focuscourses.id != course.id);\n                lists.setlistOfCourseLists(copyFocusList);\n                break;\n            }\n        }\n    }\n\n    console.log(course);\n    return (\n        <tr>\n            <td>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </td>\n            <td data-testid=\"course-id\">{course.id} {course.name}</td>\n            {//<td>{course.name}</td>\n            }\n            <td>{course.credits}</td>\n            <td><button onClick={editCourse}>Edit</button></td>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </tr>\n    );\n\n    /*\n    return (\n        <Row>\n            <Col>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </Col>\n            <Col data-testid=\"course-id\">{course.id}</Col>\n            <Col>{course.name}</Col>\n            <Col>{course.credits}</Col>\n            <Col><button onClick={editCourse}>Edit</button></Col>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </Row>\n\n            \n    );\n    */\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Class Year</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-class-year\"\n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Season Semester</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-season\"\n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.id.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const courseId = course.id;\n    const newCourse:Class = { id:courseId, name:course.name, credits:course.credits, \n        description:course.description, prereqs:course.prereqs };\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string>(\"\");\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:\"None\"}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR};\n        const prereqs = newClass.prereqs;  //changing app to make it complatibale with new courseData.josn\n        console.log(newClass);\n        /*if(prereqs[0] === \"000\"){//This is an error code if the the inputted course is not found in courseMap\n            setErrorAddCourse(true);\n            console.log(\"That's an unrecognized course\");\n        }else if(prereqs[0] === \"N/A\" || prereqs[0] === \"\" || prereqs.length===0){\n            setCurrCourse(newClasses.concat(newClass));\n            credits.setGlobalCredits(credits.globalCredits+courseCred);\n            addlistOfCourseLists(newClass);\n            hide();\n        }else{\n            let loc = -1;\n            for(let i = 0; i < lists.listOfCourseLists.length-1; i++){\n                for(let j = 0; j < lists.listOfCourseLists[i].length; j++){\n                    for(let k = 0; k < prereqs.length; k++){\n                        console.log(\"Checking course: \", lists.listOfCourseLists[i][j]);\n                        if(lists.listOfCourseLists[i][j].id === prereqs[k]){\n                            loc = i;\n                        }\n                    }\n                }\n            }\n            if(loc != -1){*/\n        setCoursePreR(prereqs);\n        setCurrCourse(newClasses.concat(newClass));\n        addlistOfCourseLists(newClass);\n        hide();\n        /*}else{\n                setErrorAddCourse(true);\n                console.log(\"Can't add that course yet!\");\n            }  \n        }*/\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Course Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseName(\"Course Name\");\n        setCourseDesc(\"Course Description\");\n        setCourseCred(0);\n        setCoursePreR(\"\");\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\"}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1 && len === 4){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:\"None\"}]);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        if(courseMap[partOfID.slice(0,4)] === undefined){\n            console.log(\"Not a valid department\");\n        }else{\n            const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n            if(validCourses.length === 1 && len === 7){\n                handleIDClick(validCourses[0].id);\n            }\n            \n           \n        }\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        setCourseId(\"Course ID\");\n        setDeptSearch(selectedDept);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        setErrorAddCourse(false);\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            console.log(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(getPrereqs(visibleCourses[cIdx].id));\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        //let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                return deptCourses[i].prereqs;\n                //loc = i;\n                //break;\n            }\n        }\n        return \"\";\n        /*let prereqs:string;\n        if(loc !== -1){\n            prereqs = deptCourses[loc].prereqs;\n            console.log(prereqs);\n            for(let i = 0; i < prereqs.length; i++){\n                const tmp = prereqs[i].split(\" \");\n                if(tmp[1] === undefined){\n                    prereqs = tmp[0];\n                }else{\n                    console.log(\"idx 0: \", tmp[0], \"\\tidx1: \", tmp[1]);\n                    prereqs = tmp[0] + tmp[1];\n                }\n            }\n        }else{\n            prereqs = \"N/A\";\n        }\n        console.log(\"Prereqs: \", prereqs, \"\\tLength: \", prereqs.length);\n        return prereqs;*/\n    }\n\n\n    function addlistOfCourseLists(c: Class){\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1], c];\n        lists.setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\" data-testid=\"dept-dropdown\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\" data-testid=\"dept-drop-menu\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu data-testid=\"course-drop-menu\">\n                                {visibleCourses.map(c =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p style={{color: \"red\"}}>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"add-course-button\" variant=\"primary\" onClick={()=>{\n                    saveAdd(); \n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { sem } from \"../interfaces/sem\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, lists, semesterCnt, credits}: \n    {semester: sem, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(\"____ Year\");\n    const [season,setSeason] = React.useState<string>(\"____ Semester\");\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    //console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return (\n        <div>\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Table striped bordered size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Remove</th>\n                        <th>Course</th>\n                        {//<th>Course Name</th>\n                        }\n                        <th>Credits</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {currClasses.map(c=> {\n                        return (\n                            <Course key = {c.id} course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                        );\n                    })\n                    }\n                    <tr>\n                        <td colSpan={5}><Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button></td>\n                    </tr>\n                </tbody>\n                <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n            </Table>\n        </div>\n    );\n        \n    /*\n\n    return <BootstrapCard className=\"border-dark\">\n        <Col>\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Row>\n                <Col><strong>Remove Course</strong></Col>\n                <Col><strong>Course ID</strong></Col>\n                <Col><strong>Course Name</strong></Col>\n                <Col><strong>Credits</strong></Col>\n                <Col><strong>Edit Course</strong></Col>\n            </Row>\n\n            {currClasses.map(c => {\n                return (\n                    <Row key = {c.id}>\n                        <Course course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                    </Row>\n                );\n            })\n            }\n            <p></p>\n            <Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button>\n            <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n        </Col>\n    </BootstrapCard>;\n    */\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\nexport function SpecialDegreeReqs({requirement, fulfilled, displayWhich, credits}: \n    {requirement: string, fulfilled: boolean, displayWhich: boolean, credits: creditsHandlers}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}</BootstrapCard.Text>\n                <BootstrapCard.Text> {displayWhich ? credits.techElectiveCredits + \" out of 6\" : credits.focusAreaCredits + \" out of 12\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport { SpecialDegreeReqs } from \"../components/SpecialDegreeReqs\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { Button, Modal, Table} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n\n\nexport function AllDegreeReqs({visible, setVisible, listOfCourseLists, credits}: \n    {visible: boolean, setVisible: (v: boolean)=>void , listOfCourseLists: Class[][], credits: creditsHandlers}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        let j = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            for(j = 0; j < listOfCourseLists[i].length; j++){\n                if(aReq.id.includes(listOfCourseLists[i][j].id)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function checkSpecialReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\" && credits.techElectiveCredits === 6){\n            return true;\n        } else if(aReq.id === \"12 credits for an approved focus area\" && credits.focusAreaCredits === 12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function displayWhichReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\"){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function hide(){\n        setVisible(!visible);\n    }\n\n    return <Modal show={visible}>\n        <Modal.Header>\n            <Modal.Title>Degree Requirements</Modal.Title>\n            <Button onClick={hide}>Close</Button>\n        </Modal.Header>\n        \n        <strong className=\"degree-subtitle\">Credit Count: {credits.globalCredits} out of 124 needed</strong>\n        <Table data-testid=\"degreeReqs\">\n            <th className=\"degree-subtitle\">Core Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CISC\") || reqs.id.includes(\"MATH\") || reqs.id.includes(\"ENGL\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Special Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map((aReq: DegreeReq) => {\n                    return (\n                        <SpecialDegreeReqs key={aReq.id} requirement={aReq.id} fulfilled={checkSpecialReq(aReq)} displayWhich={displayWhichReq(aReq)} credits={credits}></SpecialDegreeReqs> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <strong className=\"degree-subtitle\">Science Requirements</strong>\n        <Table> \n            <th className=\"degree-subtitle\">Option 1</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"PHYS\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 2</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CHEM\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 3</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"BISC\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 4</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL105\") || reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL115\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 5</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL110\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n    </Modal>;\n}","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport {sem} from \"../interfaces/sem\";\nimport { importClass } from \"../interfaces/importPlan\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\n\n\n\n//export function UploadSemesterModal({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void, plan: sem[], setPlan: (s: sem[])=>void}): JSX.Element {\nexport function UploadSemesterModal({visible, setVisible, setPlan, setSemesterCnt, setSeason, setClassYear}: \n    {visible: boolean, setVisible: (b: boolean) => void, setPlan: (s: sem[])=>void, setSemesterCnt: (s: number)=>void, setSeason: (s: string)=>void, setClassYear: (s: string)=>void}): JSX.Element {\n\n\n    const hide = () => setVisible(false);\n\n    function upload(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.currentTarget.files !== null){\n            const file = e.currentTarget.files[0];\n            const readfile = new FileReader();\n            readfile.readAsText(file);\n            readfile.onload = async(e) => {\n                const planCSV = e.target?.result;\n                const plsWork = String(planCSV);\n                parseData(plsWork);\n            };\n        } else {\n            return;\n        }\n    }\n\n    function parseData(csv: string) {\n        const headerEnd = csv.indexOf(\"\\n\");\n        let newPlanRaw: string[] = [];\n        let newLine: string;\n        let planCooking: importClass[] = [];\n        let parser = headerEnd;\n        let parserTmp = 0;\n\n        while (parser !== -1) {\n            parserTmp = csv.indexOf(\"\\n\",parser+1);\n            newLine = csv.slice(parser,parserTmp);\n            newPlanRaw = newPlanRaw.concat([newLine]);\n            parser = parserTmp;\n        }\n\n        newPlanRaw.forEach(c=>{\n            let parserStart = 1;\n            let parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemCnt = c.slice(parserStart,parserEnd);\n            const newSemCnt1 = parseInt(newSemCnt,10);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemYear = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemSeason = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newClassID = c.slice(parserStart+1,parserEnd);\n\n            if(!isNaN(newSemCnt1)) {\n                const newNode:importClass[] = [{cnt:newSemCnt1,year:newSemYear,season:newSemSeason,id:newClassID}];\n                planCooking = planCooking.concat(newNode);\n            }\n            \n        });    \n        \n        saveUpload(planCooking);\n    }\n\n    function saveUpload(data: importClass[]) {\n        let semesterList: sem[] = [];\n        let i = 0;\n        for (i;i<data[data.length-1].cnt;i++) {\n            const year = buildYear(i);\n            const season = buildSeason(i);\n            const semesterTemplate: sem = {\n                cnt:i+1,\n                year: year,\n                season: season,\n                courses: []\n            }; // create a template to build a semester\n            semesterList = semesterList.concat(semesterTemplate);\n        }\n\n        data.forEach(d=>{\n            console.log(semesterList);\n            console.log(data);\n            semesterList[d.cnt-1].season = d.season;\n            semesterList[d.cnt-1].year = d.year;\n\n            // Look up course \n\n            courseData.filter(c=>c.id.indexOf(d.id));\n\n            const x: Class[] = courseData.filter(c=>c.id.indexOf(d.id)!==-1);\n            const creditNumber = x[0].credits;\n            const classFound:Class[] = [{id:x[0].id,name:x[0].name,description:x[0].description,credits:creditNumber,prereqs:x[0].prereqs}];\n            \n            //successfully concatenates class from catalog to courseList\n\n            const courses = semesterList[d.cnt-1].courses.concat(classFound); // Concat found course to semester course list\n            \n            semesterList[d.cnt-1].courses = courses;\n        });\n\n\n        setSeason(semesterList[semesterList.length-1].season);\n        setSemesterCnt(semesterList[semesterList.length-1].cnt);\n        setClassYear(semesterList[semesterList.length-1].year);\n        setPlan(semesterList);\n        hide();\n        return 1;\n    }\n\n    function buildSeason(cnt: number):string {\n        if (cnt%2 !== 0) {\n            return \"Spring\";\n        } else {\n            return \"Fall\";\n        }\n    }\n\n    function buildYear(cnt: number):string {\n        if (cnt === 0 || cnt === 1) {\n            return \"Freshman\";\n        } else if (cnt === 2 || cnt === 3) {\n            return \"Sohpmore\";\n        } else if (cnt === 4 || cnt === 5) {\n            return \"Junior\";\n        } else {\n            return \"Senior\";\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={visible} onHide={hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload Plan</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <input className=\"csvUpload\" type=\"file\" onChange={upload}/>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={()=>{\n                        hide();\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n    \n}\n\n\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { sem } from \"./interfaces/sem\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { Class } from \"./interfaces/course\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\nimport { UploadSemesterModal } from \"./components/UploadSemesterModal\";\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_LISTOFCOURSELISTS = \"cisc-degree-listofcourseLists\"; \nexport const INITIAL_LISTOFCOURSELISTS: Class[][] = [[]];\n\nexport const INITIAL_SEMESTER: sem[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): Class[][] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_LISTOFCOURSELISTS);\n    if (rawList === null) {\n        return [...INITIAL_LISTOFCOURSELISTS];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(clear: boolean): sem[] {\n    if (clear === true) return [...INITIAL_SEMESTER];\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<sem[]>(getLocalStoragePlan(false));\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    const [uploadVisible, setUploadVisible] = useState<boolean>(false);\n    \n    const [listOfCourseLists, setlistOfCourseLists] = useState<Class[][]>(getLocalStorageList());  \n    const [listOfTechElectives, setListOfTechElectives] = useState<Class[][]>([[]]);\n    const [listOfFocusClasses, setListOfFocusClasses] = useState<Class[][]>([[]]);\n   \n    const [globalCredits, setGlobalCredits] = useState<number>(0);\n    const [techElectiveCredits, setTechElectiveCredits] = useState<number>(0);\n    const [focusAreaCredits, setFocusAreaCredits] = useState<number>(0);\n\n    const credits = {globalCredits, setGlobalCredits, techElectiveCredits, setTechElectiveCredits, focusAreaCredits, setFocusAreaCredits};\n    const lists = {listOfCourseLists, setlistOfCourseLists, listOfTechElectives, setListOfTechElectives, listOfFocusClasses, setListOfFocusClasses};\n\n    useEffect(() => {\n        console.log(`listOfCourseLists is : ${JSON.stringify(listOfCourseLists)}`);\n    },[listOfCourseLists]);\n\n    useEffect(() => {\n        console.log(`listOfTechElectives is : ${JSON.stringify(listOfTechElectives)}`);\n    },[listOfTechElectives]);\n\n    useEffect(() => {\n        console.log(`listOfFocusClasses is : ${JSON.stringify(listOfFocusClasses)}`);\n    },[listOfFocusClasses]);\n\n    function addSemester() {\n        //Adds semester to the list of semesters in the user's plan. Semester attributes set depending on the last semester attributes. \n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSememester:sem[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSememester));\n        const newList = [...listOfCourseLists];\n        const newTechList = [...listOfTechElectives];\n        const newFocusList = [...listOfFocusClasses];\n        newList.push([]);\n        newTechList.push([]);\n        newFocusList.push([]);\n        setlistOfCourseLists(newList);\n        setListOfTechElectives(newTechList);\n        setListOfFocusClasses(newFocusList);\n    }\n\n    function clearSemesters() { \n        //Clears all semesters except for the first. Resets plan to initial state. \n\n        const semesterReset: sem[] =  [\n            {\n                cnt: 1,        \n                year: \"Freshman\",\n                season: \"Fall\",\n                courses: []\n            }\n        ];\n        setCurrSemesters(semesterReset);\n        setCurrSemesters(getLocalStoragePlan(true));\n        setlistOfCourseLists(INITIAL_LISTOFCOURSELISTS);\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n        setlistOfCourseLists([currSemesters[0].courses]);\n    }\n\n    function popLists() {\n        const poppedList = [...listOfCourseLists];\n        const poppedTechList = [...listOfTechElectives];\n        const poppedFocusList = [...listOfFocusClasses];\n        poppedList.pop();\n        poppedTechList.pop();\n        poppedFocusList.pop();\n        setlistOfCourseLists(poppedList);\n        setListOfTechElectives(poppedTechList);\n        setListOfFocusClasses(poppedFocusList);\n    }\n\n    function subtractCredits() {\n        console.log(listOfCourseLists);\n        for(let i = 0; i < listOfCourseLists[semesterCnt-1].length; i++){\n            setGlobalCredits(globalCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            if (listOfTechElectives[semesterCnt-1]) {\n                for(let j = 0; j < listOfTechElectives[semesterCnt-1].length; j++){\n                    if(listOfTechElectives[semesterCnt-1][j].id === listOfCourseLists[semesterCnt-1][i].id){\n                        setTechElectiveCredits(techElectiveCredits-listOfTechElectives[semesterCnt-1][j].credits);\n                    }\n                }\n            }\n            if (listOfFocusClasses[semesterCnt-1]) {\n                for(let k = 0; k < listOfFocusClasses[semesterCnt-1].length; k++){\n                    if(listOfFocusClasses[semesterCnt-1][k].id === listOfCourseLists[semesterCnt-1][i].id){\n                        setFocusAreaCredits(focusAreaCredits-listOfFocusClasses[semesterCnt-1][k].credits);\n                    }\n                }\n            }\n        }\n    }\n\n    function rmSemester() {\n        //Removes the last semester from the list.\n        if (semesterCnt === 1) {\n            return;\n        }\n        const semPop:sem[] = currSemesters;\n        semPop.pop();\n        setCurrSemesters(semPop);\n        setClassYear(semPop[semPop.length-1].year);\n        setSeason(semPop[semPop.length-1].season);\n        setSemesterCnt(semPop[semPop.length-1].cnt);\n        subtractCredits();\n        popLists();\n    }\n\n    function saveData() {\n        //Saves list of semesters and courselist to local storage.\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(listOfCourseLists));\n    }\n\n    function showDegreeReq(){\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    function prepCSV(c: Class): string {\n        let i = 0;\n        const len = c.description.length;\n        let newDes = \"\";\n        for (i;i<len;i++){\n            newDes += c.description[i].replace(\",\",\";\"); \n        }\n        return newDes;\n    }\n\n    function exportDataFromCSV() {\n        const csvCols = [\"Semester Num\", \"Semester Year\", \"Semester Season\", \"CourseID\", \"Course Name\", \"Course Description\", \"Credits\"];\n        const content = currSemesters.map(s => [\n            [s.courses.map(c=>[s.cnt,s.year,s.season,c.id,c.name,prepCSV(c),c.credits,]).join(\" \\n \")]\n        ].join(\"\\n\")).join(\"\\n\");\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvCols + \"\\n\" + content;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"my_plan.csv\");\n        document.body.appendChild(link); \n        link.click();\n    }\n\n    function importDataFromCSV() {\n        setUploadVisible(true);\n        return 0;\n    }\n\n    function buildCurrSemesters(data: sem[]) {\n        console.log(data);\n        /*\n        let i = 0;\n        \n        let newList: string[][] = [[]];\n        for (i=0;i<data.length-1;i++) {\n            newList = newList.concat([[]]);\n        }\n        for (i=0;i<data.length;i++){\n            console.log(data[i].cnt);\n            newList[i] = data[i].courses.map(c=>c.id);\n        }\n        */\n        let newSemesterList: Class [][] = [];\n        data.map((semesters)=>{\n            newSemesterList = newSemesterList.concat([semesters.courses]);\n        });\n        \n        setlistOfCourseLists(newSemesterList);\n\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(data));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(newSemesterList));\n        window.location.reload();\n        \n    }\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button data-testid=\"degree-button\" onClick={()=>{\n                showDegreeReq(); //console.log(listOfCourseLists);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} setVisible={setAllDegreeReqVisible} listOfCourseLists={listOfCourseLists} credits={credits}></AllDegreeReqs>\n            <Button className=\"semesterControls\" data-testid=\"add-sem-button\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" data-testid=\"remove-sem-button\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" data-testid=\"save-local-storage\" onClick={saveData}>Save Schedule</Button>\n            <Button className=\"saveData\" onClick={exportDataFromCSV}>Download Plan</Button>\n            <Button className=\"saveData\" onClick={importDataFromCSV}>Upload Schedule</Button>\n            <UploadSemesterModal visible={uploadVisible} setVisible={setUploadVisible} setPlan={(data) => buildCurrSemesters(data)} setSemesterCnt={setSemesterCnt} setClassYear={setClassYear} setSeason={setSeason}></UploadSemesterModal>\n            <Row className=\"semesterRows\">\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n//\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}