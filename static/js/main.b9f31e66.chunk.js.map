{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/AllDegreeReqs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","courseList","setCourseList","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","credits","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","map","req","Item","onClick","filter","courses","handleReqClick","Footer","Button","editClass","cIdx","index","length","newClasses","Course","course","currCourses","setCurrCourses","removeCourseList","c","Row","Col","newCourses","concat","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","courseID","slice","rawCourseId","split","newCourse","title","substr","parseInt","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","saveAdd","newClass","selectedCourse","console","log","deptCourses","undefined","loc","i","getPrereqs","addCourseList","j","handleDeptClick","selectedDept","size","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","validCourses","handleCourseSearch","cID","handleIDClick","xs","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","setCurrClasses","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","Text","AllDegreeReqs","checkDegreeReq","aReq","includes","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_COURSELIST","INITIAL_COURSELIST","INITIAL_SEMESTER","cnt","year","App","rawSchedule","localStorage","getItem","JSON","parse","getLocalStoragePlan","currSemesters","setCurrSemesters","semesterCnt","setSemesterCnt","rawList","getLocalStorageList","allDegreeReqVisible","setAllDegreeReqVisible","useEffect","newSeason","newYear","newSem","semPop","pop","setItem","stringify","s","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9f31e66.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, courseList, setCourseList} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, courseList: string[], setCourseList: (c: string[])=>void}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n        //console.log(\"Length of newClasses:\", newClasses.length);\n        for (let index = 0; index < newClasses.length; index++) {\n            //console.log(\"ID: \", newClasses[index].id);\n            //console.log(\"Type: \", typeof newClasses[index]);\n            \n        }\n\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n    //console.log(\"Modal Course: \", ogClass.id);\n\n    const hide = () => setVisible(false);\n\n    function handleReqClick(req: string) {\n        setCourseList([...courseList.filter(courses => courses != reqId), req]);\n        setReqId(req);\n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR([ev.target.value])}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle  className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {DEGREEREQS.map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key = {req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, courseList, setCourseList} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, courseList: string[], setCourseList: (c: string[])=>void}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    function editCourse():void{\n        //console.log(\"set visible \", course);\n        //removeCourseList(course.id);\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id == course.id){\n                removeCourseList(currCourses[index].id);\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        setCurrCourses(newCourses);\n    }\n\n    function removeCourseList(c: string) { \n        setCourseList(courseList.filter(courses => courses != c));\n    }\n\n    return (\n        <Row>\n            <Col>\n                <button className=\"removeCourse\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </Col>\n            <Col>{course.id}</Col>\n            <Col>{course.name}</Col>\n            {/*\n            <Col>{course.description}</Col>\n            */}\n            <Col>{course.credits}</Col>\n            <Col><button onClick={editCourse}>Edit</button></Col>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} courseList={courseList} setCourseList={setCourseList}></EditCourseModal>\n        </Row>\n\n            \n    );\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit Course</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.courseID.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const rawCourseId = course.courseID.split(\" \");\n    const courseId = rawCourseId[0] + rawCourseId[1];\n    const newCourse:Class = { id:courseId, name:course.title.substr(11), credits:parseInt(course.credits), \n        description:course.description, prereqs:course.prereqs };\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, courseList, setCourseList} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, courseList: string[], setCourseList: (c: string[])=>void}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"Course Description\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>([\"Course Prerequisite IDs\"]);\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n\n\n    //const deptList:string[] = courseMap.e\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        //console.log(\"id: \", courseId, \" name: \", courseName, \" description: \", courseDesc, \" credits: \", courseCred, \" prereqs: \", coursePreR);\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR};\n        //console.log(\"Length of newClasses:\", newClasses.length);\n        const prereqs = getPrereqs(courseId);\n        if(prereqs[0] === \"000\"){\n            setErrorAddCourse(true);\n            console.log(\"That's an unrecognized course\");\n\n        }\n \n        if(prereqs[0] === \"N/A\" || prereqs[0] === \"\" || prereqs.length===0){\n            setCurrCourse(newClasses.concat(newClass));\n            addCourseList(newClass.id);\n            hide();\n        }else{\n            let loc = -1;\n            for(let i = 0; i < courseList.length; i++){\n                for(let j = 0; j < prereqs.length; j++){\n                    if(courseList[i] === prereqs[j]){\n                        loc = i;\n                    }\n                }\n            }\n            if(loc != -1){\n                setCurrCourse(newClasses.concat(newClass));\n                addCourseList(newClass.id);\n                hide();\n            }else{\n                setErrorAddCourse(true);\n                console.log(\"Can't add that course yet!\");\n            }  \n        }\n        //console.log(courseList);\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Courese Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseId(\"Course Name\");\n        setCourseDesc(\"Course Description\");\n        setCourseCred(0);\n        setCoursePreR([\"\"]);\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        //const validCourses:Class[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n        //setVisibleCourses(validCourses);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        if(courseMap[partOfID.slice(0,4)] === undefined){\n            console.log(\"Not a valid department\");\n        }else{\n            const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n            setVisibleCourses(validCourses);\n        }\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        //getCoursesfromDept(selectedDept);\n        //console.log(deptCourses.length);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(visibleCourses[cIdx].prereqs);\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string[]{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        if(deptCourses === undefined){\n            console.log(\"Selected Course is not in a valid department\");\n            return [\"000\"];\n        }\n        //getCoursesfromDept(selectedCourse.slice(0,4));\n        let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                console.log(\"Course is in the list\");\n                loc = i;\n                break;\n            }else{\n                console.log(\"Course is not in the list\");\n            }\n        }\n        let prereqs:string[];\n        if(loc !== -1){\n            prereqs = deptCourses[loc].prereqs;\n        }else{\n            prereqs = [\"N/A\"];\n        }\n        console.log(\"Prereqs: \", prereqs);\n        return prereqs;\n    }\n\n\n    function addCourseList(c: string){\n        setCourseList([...courseList, c]);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle  className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {visibleCourses.map(c =>  {\n                                    //console.log(visibleCourses);\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={()=>{\n                    saveAdd(); //displayCurrClasses(currClasses);\n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Card as BootstrapCard, Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { sem } from \"../interfaces/sem\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, courseList, setCourseList}: \n    {semester: sem, courseList: string[], setCourseList: (c: string[])=>void}): JSX.Element {\n    //console.log(\"in Semester\");\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(\"____ Year\");\n    const [season,setSeason] = React.useState<string>(\"____ Semester\");\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return <BootstrapCard className=\"border-dark\">\n        <Col>\n            <div className=\"semester-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Row>\n                <Col><strong>Remove Course</strong></Col>\n                <Col><strong>Course ID</strong></Col>\n                <Col><strong>Course Name</strong></Col>\n                {/*\n                <Col><strong>Description</strong></Col>\n                */}\n                <Col><strong>Credits</strong></Col>\n                <Col><strong>Edit Course</strong></Col>\n            </Row>\n\n            {currClasses.map(c => {\n                return (\n                    <Row key = {c.id}>\n                        <Course course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} courseList={courseList} setCourseList={setCourseList}></Course>\n                    </Row>\n                );\n            })\n            }\n            <p></p>\n            <Button className=\"addCourse\" data-testid=\"addCourse\" onClick={addCourse}>Add New Course</Button>\n            <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} courseList={courseList} setCourseList={setCourseList}></AddCourseModal>\n        </Col>\n    </BootstrapCard>;\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-4\" : \"requnfilled degree col-sm-4\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { Card as BootstrapCard, Col} from \"react-bootstrap\";\n\n\nexport function AllDegreeReqs({visible, courseList}: \n    {visible: boolean, courseList: string[]}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        for(i = 0; i < courseList.length; i++){\n            if(aReq.id.includes(courseList[i])){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    return <Col>\n        {visible && <BootstrapCard>\n            Core Requirements\n            {DEGREEREQS.map((aReq: DegreeReq) => {\n                return (\n                    <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                );\n            })}\n        </BootstrapCard>}\n    </Col>;\n}","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { sem } from \"./interfaces/sem\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\n\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_COURSELIST = \"cisc-degree-courseList\"; \nexport const INITIAL_COURSELIST: string[] = [];\nexport const INITIAL_SEMESTER: sem[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): string[] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_COURSELIST);\n    if (rawList === null) {\n        return [...INITIAL_COURSELIST];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(): sem[] {\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<sem[]>(getLocalStoragePlan());\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [courseList, setCourseList] = useState<string[]>(getLocalStorageList());\n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    \n\n    useEffect(() => {\n        console.log(`courseList is : ${courseList}`);\n    },[courseList]);\n\n    function addSemester() {\n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSem:sem[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSem));   \n    }\n\n    function clearSemesters() {\n        setCurrSemesters(INITIAL_SEMESTER);\n        setCourseList(INITIAL_COURSELIST);\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n    }\n\n    function rmSemester() {\n        if (semesterCnt === 1) {\n            return;\n        }\n        const semPop:sem[] = currSemesters;\n        semPop.pop();\n        setCurrSemesters(semPop);\n        setClassYear(semPop[semPop.length-1].year);\n        setSeason(semPop[semPop.length-1].season);\n        setSemesterCnt(semPop[semPop.length-1].cnt);\n    }\n\n    function saveData() {\n        console.log(currSemesters);\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_COURSELIST, JSON.stringify(courseList));\n    }\n\n    /*function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        for(i = 0; i < courseList.length; i++){\n            if(aReq.id.includes(courseList[i])){\n                return true;\n            }\n        }\n        return false;\n    }*/\n\n    function showDegreeReq(){\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button onClick={()=>{\n                showDegreeReq(); //console.log(courseList);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} courseList={courseList}></AllDegreeReqs>\n            <Button className=\"semesterControls\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" onClick={saveData}>Save Schedule</Button>\n            <Row>\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} courseList={courseList} setCourseList={setCourseList}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} courseList={courseList} setCourseList={setCourseList}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}