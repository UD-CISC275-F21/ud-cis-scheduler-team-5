{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/AllDegreeReqs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","listOfCourseLists","setlistOfCourseLists","semesterCnt","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","credits","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","map","req","Item","onClick","copyList","courseList","filter","courses","handleReqClick","Footer","Button","editClass","cIdx","index","length","newClasses","Course","course","currCourses","setCurrCourses","removelistOfCourseLists","c","Row","Col","newCourses","concat","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","courseID","slice","rawCourseId","split","newCourse","title","substr","parseInt","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","saveAdd","newClass","selectedCourse","console","log","deptCourses","loc","i","getPrereqs","addlistOfCourseLists","j","handleDeptClick","selectedDept","size","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","validCourses","handleCourseSearch","cID","handleIDClick","xs","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","setCurrClasses","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","Text","AllDegreeReqs","checkDegreeReq","aReq","includes","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_LISTOFCOURSELISTS","INITIAL_LISTOFCOURSELISTS","INITIAL_SEMESTER","cnt","year","App","rawSchedule","localStorage","getItem","JSON","parse","getLocalStoragePlan","currSemesters","setCurrSemesters","setSemesterCnt","rawList","getLocalStorageList","allDegreeReqVisible","setAllDegreeReqVisible","useEffect","newSeason","newYear","newSem","semPop","pop","setItem","stringify","s","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eedb86b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, listOfCourseLists, setlistOfCourseLists, semesterCnt} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, listOfCourseLists: string[][], setlistOfCourseLists: (c: string[][])=>void, semesterCnt: number}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n        //console.log(\"Length of newClasses:\", newClasses.length);\n        for (let index = 0; index < newClasses.length; index++) {\n            //console.log(\"ID: \", newClasses[index].id);\n            //console.log(\"Type: \", typeof newClasses[index]);\n            \n        }\n\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n    //console.log(\"Modal Course: \", ogClass.id);\n\n    const hide = () => setVisible(false);\n\n    function handleReqClick(req: string) {\n        const copyList: string[][] = listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1].filter(courses => courses != reqId), req];\n        setlistOfCourseLists(copyList);\n        setReqId(req);\n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR([ev.target.value])}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle  className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {DEGREEREQS.map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key = {req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, listOfCourseLists, setlistOfCourseLists, semesterCnt} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, listOfCourseLists: string[][], setlistOfCourseLists: (c: string[][])=>void, semesterCnt: number}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    function editCourse():void{\n        //console.log(\"set visible \", course);\n        //removelistOfCourseLists(course.id);\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id == course.id){\n                removelistOfCourseLists(currCourses[index].id);\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        setCurrCourses(newCourses);\n    }\n\n    function removelistOfCourseLists(c: string) { \n        const copyList: string[][] = listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = copyList[semesterCnt-1].filter(courses => courses != c);\n        setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Row>\n            <Col>\n                <button className=\"removeCourse\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </Col>\n            <Col>{course.id}</Col>\n            <Col>{course.name}</Col>\n            {/*\n            <Col>{course.description}</Col>\n            */}\n            <Col>{course.credits}</Col>\n            <Col><button onClick={editCourse}>Edit</button></Col>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} listOfCourseLists={listOfCourseLists} setlistOfCourseLists={setlistOfCourseLists} semesterCnt={semesterCnt}></EditCourseModal>\n        </Row>\n\n            \n    );\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit Course</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.courseID.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const rawCourseId = course.courseID.split(\" \");\n    const courseId = rawCourseId[0] + rawCourseId[1];\n    const newCourse:Class = { id:courseId, name:course.title.substr(11), credits:parseInt(course.credits), \n        description:course.description, prereqs:course.prereqs };\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, listOfCourseLists, setlistOfCourseLists, semesterCnt} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, listOfCourseLists: string[][], setlistOfCourseLists: (c: string[][])=>void, semesterCnt: number}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"Course Description\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>([\"Course Prerequisite IDs\"]);\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n\n\n    //const deptList:string[] = courseMap.e\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR};\n        //console.log(\"Length of newClasses:\", newClasses.length);\n        const prereqs = getPrereqs(courseId);\n \n        if(prereqs[0] === \"N/A\" || prereqs[0] === \"\" || prereqs.length===0){\n            setCurrCourse(newClasses.concat(newClass));\n            addlistOfCourseLists(newClass.id);\n            hide();\n        }else{\n            let loc = -1;\n            for(let i = 0; i < listOfCourseLists.length; i++){\n                for(let j = 0; j < prereqs.length; j++){\n                    if(listOfCourseLists[semesterCnt-1][i] === prereqs[j]){\n                        loc = i;\n                    }\n                }\n            }\n            if(loc != -1){\n                setCurrCourse(newClasses.concat(newClass));\n                addlistOfCourseLists(newClass.id);\n                hide();\n            }else{\n                setErrorAddCourse(true);\n                console.log(\"Can't add that course yet!\");\n            }  \n        }\n        //console.log(listOfCourseLists);\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Courese Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseDesc(\"Course Description\");\n        setCoursePreR([\"\"]);\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        //const validCourses:Class[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n        //setVisibleCourses(validCourses);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n        setVisibleCourses(validCourses);\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        //getCoursesfromDept(selectedDept);\n        //console.log(deptCourses.length);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(visibleCourses[cIdx].prereqs);\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string[]{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        //getCoursesfromDept(selectedCourse.slice(0,4));\n        let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                console.log(\"Course is in the list\");\n                loc = i;\n                break;\n            }\n        }\n        let prereqs:string[];\n        if(loc !== -1){\n            prereqs = deptCourses[loc].prereqs;\n        }else{\n            prereqs = [\"N/A\"];\n        }\n        console.log(\"Prereqs: \", prereqs);\n        return prereqs;\n    }\n\n\n    function addlistOfCourseLists(c: string){\n        const copyList: string[][] = listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1], c];\n        setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle  className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {visibleCourses.map(c =>  {\n                                    //console.log(visibleCourses);\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"add-course-button\" variant=\"primary\" onClick={()=>{\n                    saveAdd(); //displayCurrClasses(currClasses);\n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Card as BootstrapCard, Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { sem } from \"../interfaces/sem\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, listOfCourseLists, setlistOfCourseLists, semesterCnt}: \n    {semester: sem, listOfCourseLists: string[][], setlistOfCourseLists: (c: string[][])=>void, semesterCnt: number}): JSX.Element {\n    //console.log(\"in Semester\");\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(\"____ Year\");\n    const [season,setSeason] = React.useState<string>(\"____ Semester\");\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return <BootstrapCard className=\"border-dark\">\n        <Col>\n            <div className=\"semester-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Row>\n                <Col><strong>Remove Course</strong></Col>\n                <Col><strong>Course ID</strong></Col>\n                <Col><strong>Course Name</strong></Col>\n                {/*\n                <Col><strong>Description</strong></Col>\n                */}\n                <Col><strong>Credits</strong></Col>\n                <Col><strong>Edit Course</strong></Col>\n            </Row>\n\n            {currClasses.map(c => {\n                return (\n                    <Row key = {c.id}>\n                        <Course course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} listOfCourseLists={listOfCourseLists} setlistOfCourseLists={setlistOfCourseLists} semesterCnt={semesterCnt}></Course>\n                    </Row>\n                );\n            })\n            }\n            <p></p>\n            <Button className=\"addCourse\" onClick={addCourse}>Add New Course</Button>\n            <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} listOfCourseLists={listOfCourseLists} setlistOfCourseLists={setlistOfCourseLists} semesterCnt={semesterCnt}></AddCourseModal>\n        </Col>\n    </BootstrapCard>;\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-4\" : \"requnfilled degree col-sm-4\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { Card as BootstrapCard, Col} from \"react-bootstrap\";\n\n\nexport function AllDegreeReqs({visible, listOfCourseLists}: \n    {visible: boolean, listOfCourseLists: string[][]}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {\n        console.log(\"hi\");\n        let i = 0;\n        let j = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            for(j = 0; j < listOfCourseLists[i].length; j++){\n                if(aReq.id.includes(listOfCourseLists[i][j])){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    return <Col>\n        {visible && <BootstrapCard data-testid=\"degreeReqs\">\n            Core Requirements\n            {DEGREEREQS.map((aReq: DegreeReq) => {\n                return (\n                    <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                );\n            })}\n        </BootstrapCard>}\n    </Col>;\n}","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { sem } from \"./interfaces/sem\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\n\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_LISTOFCOURSELISTS = \"cisc-degree-listofcourseLists\"; \nexport const INITIAL_LISTOFCOURSELISTS: string[][] = [[]];\nexport const INITIAL_SEMESTER: sem[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): string[][] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_LISTOFCOURSELISTS);\n    if (rawList === null) {\n        return [...INITIAL_LISTOFCOURSELISTS];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(): sem[] {\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<sem[]>(getLocalStoragePlan());\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [listOfCourseLists, setlistOfCourseLists] = useState<string[][]>(getLocalStorageList());    \n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    \n\n    useEffect(() => {\n        console.log(`listOfCourseLists is : ${listOfCourseLists}`);\n    },[listOfCourseLists]);\n\n    function addSemester() {\n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSem:sem[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSem));   \n    }\n\n    function clearSemesters() {\n        setCurrSemesters(INITIAL_SEMESTER);\n        setlistOfCourseLists(INITIAL_LISTOFCOURSELISTS);\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n    }\n\n    function rmSemester() {\n        if (semesterCnt === 1) {\n            return;\n        }\n        const semPop:sem[] = currSemesters;\n        semPop.pop();\n        setCurrSemesters(semPop);\n        setClassYear(semPop[semPop.length-1].year);\n        setSeason(semPop[semPop.length-1].season);\n        setSemesterCnt(semPop[semPop.length-1].cnt);\n    }\n\n    function saveData() {\n        console.log(currSemesters);\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(listOfCourseLists));\n    }\n\n    /*function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            if(aReq.id.includes(listOfCourseLists[i])){\n                return true;\n            }\n        }\n        return false;\n    }*/\n\n    function showDegreeReq(){\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button data-testid=\"degree-button\" onClick={()=>{\n                showDegreeReq(); //console.log(listOfCourseLists);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} listOfCourseLists={listOfCourseLists}></AllDegreeReqs>\n            <Button className=\"semesterControls\" data-testid=\"add-sem-button\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" data-testid=\"remove-sem-button\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" onClick={saveData}>Save Schedule</Button>\n            <Row>\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} listOfCourseLists={listOfCourseLists} setlistOfCourseLists={setlistOfCourseLists} semesterCnt={semesterCnt}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} listOfCourseLists={listOfCourseLists} setlistOfCourseLists={setlistOfCourseLists} semesterCnt={semesterCnt}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}