{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/SpecialDegreeReqs.tsx","components/AllDegreeReqs.tsx","components/UploadSemesterModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","lists","semesterCnt","credits","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","prevReq","setPrevReq","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","filter","reqs","includes","map","req","Item","onClick","handleReqClick","Footer","Button","editClass","specreq","cIdx","index","length","newClasses","setTechElectiveCredits","techElectiveCredits","setFocusAreaCredits","focusAreaCredits","copyList","listOfCourseLists","courseList","courses","setlistOfCourseLists","Course","course","currCourses","setCurrCourses","removeSpecialReqCredits","console","log","newCourses","concat","i","setGlobalCredits","globalCredits","removelistOfCourseLists","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","slice","newCourse","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","saveAdd","newClass","c","addlistOfCourseLists","handleDeptClick","selectedDept","deptCourses","handleIDClick","cID","selectedCourse","getPrereqs","size","Row","Col","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","undefined","validCourses","handleCourseSearch","xs","style","color","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","setCurrClasses","Table","striped","bordered","colSpan","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","Text","SpecialDegreeReqs","displayWhich","AllDegreeReqs","checkDegreeReq","aReq","j","checkSpecialReq","displayWhichReq","UploadSemesterModal","setPlan","setSemesterCnt","parseData","csv","newLine","headerEnd","indexOf","newPlanRaw","planCooking","parser","parserTmp","parserStart","parserEnd","newSemCnt","newSemCnt1","parseInt","newSemYear","newSemSeason","newClassID","isNaN","newNode","cnt","year","data","semesterList","semesterTemplate","buildYear","buildSeason","d","creditNumber","classFound","saveUpload","type","e","currentTarget","files","file","readfile","FileReader","readAsText","onload","planCSV","result","String","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_LISTOFCOURSELISTS","INITIAL_LISTOFCOURSELISTS","INITIAL_SEMESTER","getLocalStoragePlan","clear","rawSchedule","localStorage","getItem","JSON","parse","App","currSemesters","setCurrSemesters","allDegreeReqVisible","setAllDegreeReqVisible","uploadVisible","setUploadVisible","rawList","getLocalStorageList","prepCSV","newDes","replace","useEffect","stringify","newSeason","newYear","newSememester","newList","resetCredits","semPop","pop","subtractCredits","poppedList","popLists","setItem","content","s","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","newSemesterList","semesters","window","location","reload","buildCurrSemesters","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a785201c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n    const [prevReq, setPrevReq] = useState<string>(\"\");\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR, specreq: reqId};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n\n        if(reqId === \"Six additional credits of technical electives\"){   \n            credits.setTechElectiveCredits(credits.techElectiveCredits+editClass.credits);\n            if(prevReq === \"12 credits for an approved focus area\") {  \n                credits.setFocusAreaCredits(credits.focusAreaCredits-editClass.credits);   //remove credits from focus area if you switched from focus area to tech electives\n            } \n        } else if (reqId === \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits+editClass.credits);\n            if(prevReq === \"Six additional credits of technical electives\"){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-editClass.credits); //vice versa of above case\n            }\n        } \n\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList => [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1].filter(courses => courses.id != ogClass.id), editClass];\n        lists.setlistOfCourseLists(copyList);\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n\n    function handleReqClick(req: string) { \n        setPrevReq(reqId);\n        setReqId(req); \n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" aria-label=\"course-id-input\" rows={1}\n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key={req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\n//import { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, lists, semesterCnt, credits} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    \n    function editCourse():void{\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id === course.id){\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        removelistOfCourseLists();\n        setCurrCourses(newCourses);\n    }\n\n    function removelistOfCourseLists() { \n        for(let i = 0; i < lists.listOfCourseLists[semesterCnt-1].length; i++){\n            if(lists.listOfCourseLists[semesterCnt-1][i].id === course.id) {\n                credits.setGlobalCredits(credits.globalCredits - lists.listOfCourseLists[semesterCnt-1][i].credits);\n                removeSpecialReqCredits(lists.listOfCourseLists[semesterCnt-1][i]);\n                const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n                copyList[semesterCnt-1] = copyList[semesterCnt-1].filter(courses => courses.id != course.id);\n                lists.setlistOfCourseLists(copyList);\n                break;\n            }\n        }\n    }\n\n    function removeSpecialReqCredits(course: Class){\n        if(course.specreq == \"Six additional credits of technical electives\"){\n            credits.setTechElectiveCredits(credits.techElectiveCredits-course.credits);\n        } else if (course.specreq == \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits-course.credits);\n        }\n    }\n\n    console.log(course);\n    return (\n        <tr>\n            <td>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </td>\n            <td data-testid=\"course-id\">{course.id} {course.name}</td>\n            {//<td>{course.name}</td>\n            }\n            <td>{course.credits}</td>\n            <td><button onClick={editCourse}>Edit</button></td>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </tr>\n    );\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Class Year</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-class-year\"\n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Season Semester</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-season\"\n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.id.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const courseId = course.id;\n    const newCourse:Class = { id:courseId, name:course.name, credits:course.credits, \n        description:course.description, prereqs:course.prereqs, specreq:\"\"};\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string>(\"\");\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR, \"specreq\":\"\"};\n        const prereqs = newClass.prereqs;  //changing app to make it complatibale with new courseData.josn\n        console.log(newClass);\n        setCoursePreR(prereqs);\n        setCurrCourse(newClasses.concat(newClass));\n        addlistOfCourseLists(newClass);\n        hide();\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Course Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseName(\"Course Name\");\n        setCourseDesc(\"Course Description\");\n        setCourseCred(0);\n        setCoursePreR(\"\");\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1 && len === 4){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        if(courseMap[partOfID.slice(0,4)] === undefined){\n            console.log(\"Not a valid department\");\n        }else{\n            const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n            if(validCourses.length === 1 && len === 7){\n                handleIDClick(validCourses[0].id);\n            }\n            \n           \n        }\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        setCourseId(\"Course ID\");\n        setDeptSearch(selectedDept);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        setErrorAddCourse(false);\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            console.log(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(getPrereqs(visibleCourses[cIdx].id));\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        //let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                return deptCourses[i].prereqs;\n                //loc = i;\n                //break;\n            }\n        }\n        return \"\";\n    }\n\n\n    function addlistOfCourseLists(c: Class){\n        credits.setGlobalCredits(credits.globalCredits+courseCred);\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1], c];\n        lists.setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\" data-testid=\"dept-dropdown\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\" data-testid=\"dept-drop-menu\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu data-testid=\"course-drop-menu\">\n                                {visibleCourses.map(c =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p style={{color: \"red\"}}>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"add-course-button\" variant=\"primary\" onClick={()=>{\n                    saveAdd(); \n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { sem } from \"../interfaces/sem\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, lists, semesterCnt, credits}: \n    {semester: sem, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(\"____ Year\");\n    const [season,setSeason] = React.useState<string>(\"____ Semester\");\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    //console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return (\n        <div>\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Table striped bordered size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Remove</th>\n                        <th>Course</th>\n                        {//<th>Course Name</th>\n                        }\n                        <th>Credits</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {currClasses.map(c=> {\n                        return (\n                            <Course key = {c.id} course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                        );\n                    })\n                    }\n                    <tr>\n                        <td colSpan={5}><Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button></td>\n                    </tr>\n                </tbody>\n                <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n            </Table>\n        </div>\n    );\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\nexport function SpecialDegreeReqs({requirement, fulfilled, displayWhich, credits}: \n    {requirement: string, fulfilled: boolean, displayWhich: boolean, credits: creditsHandlers}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}</BootstrapCard.Text>\n                <BootstrapCard.Text> {displayWhich ? credits.techElectiveCredits + \" out of 6\" : credits.focusAreaCredits + \" out of 12\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport { SpecialDegreeReqs } from \"../components/SpecialDegreeReqs\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { Button, Modal, Table} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n\n\nexport function AllDegreeReqs({visible, setVisible, listOfCourseLists, credits}: \n    {visible: boolean, setVisible: (v: boolean)=>void , listOfCourseLists: Class[][], credits: creditsHandlers}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {\n        let i = 0;\n        let j = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            for(j = 0; j < listOfCourseLists[i].length; j++){\n                if(aReq.id.includes(listOfCourseLists[i][j].id)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function checkSpecialReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\" && credits.techElectiveCredits === 6){\n            return true;\n        } else if(aReq.id === \"12 credits for an approved focus area\" && credits.focusAreaCredits === 12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function displayWhichReq(aReq: DegreeReq){\n        if(aReq.id === \"Six additional credits of technical electives\"){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function hide(){\n        setVisible(!visible);\n    }\n\n    return <Modal show={visible}>\n        <Modal.Header>\n            <Modal.Title>Degree Requirements</Modal.Title>\n            <Button onClick={hide}>Close</Button>\n        </Modal.Header>\n        \n        <strong className=\"degree-subtitle\">Credit Count: {credits.globalCredits} out of 124 needed</strong>\n        <Table data-testid=\"degreeReqs\">\n            <th className=\"degree-subtitle\">Core Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CISC\") || reqs.id.includes(\"MATH\") || reqs.id.includes(\"ENGL\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Special Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map((aReq: DegreeReq) => {\n                    return (\n                        <SpecialDegreeReqs key={aReq.id} requirement={aReq.id} fulfilled={checkSpecialReq(aReq)} displayWhich={displayWhichReq(aReq)} credits={credits}></SpecialDegreeReqs> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <strong className=\"degree-subtitle\">Science Requirements</strong>\n        <Table> \n            <th className=\"degree-subtitle\">Option 1</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"PHYS\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 2</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CHEM\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 3</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"BISC\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 4</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL105\") || reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL115\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 5</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL110\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n    </Modal>;\n}","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport {sem} from \"../interfaces/sem\";\nimport { importClass } from \"../interfaces/importPlan\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\n\n//export function UploadSemesterModal({visible, setVisible}: {visible: boolean, setVisible: (b: boolean) => void, plan: sem[], setPlan: (s: sem[])=>void}): JSX.Element {\nexport function UploadSemesterModal({visible, setVisible, setPlan, setSemesterCnt, setSeason, setClassYear}: \n    {visible: boolean, setVisible: (b: boolean) => void, setPlan: (s: sem[])=>void, setSemesterCnt: (s: number)=>void, setSeason: (s: string)=>void, setClassYear: (s: string)=>void}): JSX.Element {\n\n\n    const hide = () => setVisible(false);\n\n    function upload(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.currentTarget.files !== null){\n            const file = e.currentTarget.files[0];\n            const readfile = new FileReader();\n            readfile.readAsText(file);\n            readfile.onload = async(e) => {\n                const planCSV = e.target?.result;\n                const plsWork = String(planCSV);\n                parseData(plsWork);\n            };\n        } else {\n            return;\n        }\n    }\n\n    function parseData(csv: string) {\n        const headerEnd = csv.indexOf(\"\\n\");\n        let newPlanRaw: string[] = [];\n        let newLine: string;\n        let planCooking: importClass[] = [];\n        let parser = headerEnd;\n        let parserTmp = 0;\n\n        while (parser !== -1) {\n            parserTmp = csv.indexOf(\"\\n\",parser+1);\n            newLine = csv.slice(parser,parserTmp);\n            newPlanRaw = newPlanRaw.concat([newLine]);\n            parser = parserTmp;\n        }\n\n        newPlanRaw.forEach(c=>{\n            let parserStart = 1;\n            let parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemCnt = c.slice(parserStart,parserEnd);\n            const newSemCnt1 = parseInt(newSemCnt,10);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemYear = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemSeason = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newClassID = c.slice(parserStart+1,parserEnd);\n\n            if(!isNaN(newSemCnt1)) {\n                const newNode:importClass[] = [{cnt:newSemCnt1,year:newSemYear,season:newSemSeason,id:newClassID}];\n                planCooking = planCooking.concat(newNode);\n            }\n            \n        });    \n        \n        saveUpload(planCooking);\n    }\n\n    function saveUpload(data: importClass[]) {\n        let semesterList: sem[] = [];\n        let i = 0;\n        for (i;i<data[data.length-1].cnt;i++) {\n            const year = buildYear(i);\n            const season = buildSeason(i);\n            const semesterTemplate: sem = {\n                cnt:i+1,\n                year: year,\n                season: season,\n                courses: []\n            }; // create a template to build a semester\n            semesterList = semesterList.concat(semesterTemplate);\n        }\n\n        data.forEach(d=>{\n            console.log(semesterList);\n            console.log(data);\n            semesterList[d.cnt-1].season = d.season;\n            semesterList[d.cnt-1].year = d.year;\n\n            // Look up course \n\n            courseData.filter(c=>c.id.indexOf(d.id));\n\n            const x: Class[] = courseMap[d.id.slice(0,4)].filter(c=>c.id.indexOf(d.id)!==-1);\n            const creditNumber = x[0].credits;\n            const classFound:Class[] = [{id:x[0].id,name:x[0].name,description:x[0].description,credits:creditNumber,prereqs:x[0].prereqs, specreq:\"\"}];\n            \n            //successfully concatenates class from catalog to courseList\n\n            const courses = semesterList[d.cnt-1].courses.concat(classFound); // Concat found course to semester course list\n            \n            semesterList[d.cnt-1].courses = courses;\n        });\n\n\n        setSeason(semesterList[semesterList.length-1].season);\n        setSemesterCnt(semesterList[semesterList.length-1].cnt);\n        setClassYear(semesterList[semesterList.length-1].year);\n        setPlan(semesterList);\n        hide();\n        return 1;\n    }\n\n    function buildSeason(cnt: number):string {\n        if (cnt%2 !== 0) {\n            return \"Spring\";\n        } else {\n            return \"Fall\";\n        }\n    }\n\n    function buildYear(cnt: number):string {\n        if (cnt === 0 || cnt === 1) {\n            return \"Freshman\";\n        } else if (cnt === 2 || cnt === 3) {\n            return \"Sohpmore\";\n        } else if (cnt === 4 || cnt === 5) {\n            return \"Junior\";\n        } else {\n            return \"Senior\";\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={visible} onHide={hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload Plan</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <input className=\"csvUpload\" type=\"file\" onChange={upload}/>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={()=>{\n                        hide();\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n    \n}\n\n\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { sem } from \"./interfaces/sem\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { Class } from \"./interfaces/course\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\nimport { UploadSemesterModal } from \"./components/UploadSemesterModal\";\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_LISTOFCOURSELISTS = \"cisc-degree-listofcourseLists\"; \nexport const INITIAL_LISTOFCOURSELISTS: Class[][] = [[]];\n\nexport const INITIAL_SEMESTER: sem[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): Class[][] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_LISTOFCOURSELISTS);\n    if (rawList === null) {\n        return [...INITIAL_LISTOFCOURSELISTS];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(clear: boolean): sem[] {\n    if (clear === true) return [...INITIAL_SEMESTER];\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<sem[]>(getLocalStoragePlan(false));\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    const [uploadVisible, setUploadVisible] = useState<boolean>(false);\n    const [listOfCourseLists, setlistOfCourseLists] = useState<Class[][]>(getLocalStorageList());  \n    const [globalCredits, setGlobalCredits] = useState<number>(0);\n    const [techElectiveCredits, setTechElectiveCredits] = useState<number>(0);\n    const [focusAreaCredits, setFocusAreaCredits] = useState<number>(0);\n\n    const credits = {globalCredits, setGlobalCredits, techElectiveCredits, setTechElectiveCredits, focusAreaCredits, setFocusAreaCredits};\n    const lists = {listOfCourseLists, setlistOfCourseLists};\n\n    useEffect(() => {\n        console.log(`listOfCourseLists is : ${JSON.stringify(listOfCourseLists)}`);\n    },[listOfCourseLists]);\n\n    function addSemester() {\n        //Adds semester to the list of semesters in the user's plan. Semester attributes set depending on the last semester attributes. \n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSememester:sem[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSememester));\n        const newList = [...listOfCourseLists];\n        newList.push([]);\n        setlistOfCourseLists(newList);\n    }\n\n    function resetCredits() {\n        setGlobalCredits(0);\n        setTechElectiveCredits(0);\n        setFocusAreaCredits(0);\n        if(currSemesters[0].courses.length > 0){\n            for(let i = 0; i < currSemesters[0].courses.length; i++){\n                setGlobalCredits(0+currSemesters[0].courses[i].credits);\n            }\n        }\n    }\n\n    function clearSemesters() { \n        //Clears all semesters except for the first. Resets plan to initial state. \n\n        const semesterReset: sem[] =  [\n            {\n                cnt: 1,        \n                year: \"Freshman\",\n                season: \"Fall\",\n                courses: []\n            }\n        ];\n        setCurrSemesters(semesterReset);\n        setCurrSemesters(getLocalStoragePlan(true));\n        setlistOfCourseLists([currSemesters[0].courses]);\n        resetCredits();\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n       \n    }\n\n    function popLists() {\n        const poppedList = [...listOfCourseLists];\n        poppedList.pop();\n        setlistOfCourseLists(poppedList);\n    }\n\n    function subtractCredits() {\n        console.log(listOfCourseLists);\n        for(let i = 0; i < listOfCourseLists[semesterCnt-1].length; i++){\n            setGlobalCredits(globalCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            if(listOfCourseLists[semesterCnt-1][i].specreq === \"Six additional credits of technical electives\"){\n                setTechElectiveCredits(techElectiveCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            } else if(listOfCourseLists[semesterCnt-1][i].specreq === \"12 credits for an approved focus area\") {\n                setFocusAreaCredits(focusAreaCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            }\n        }\n    }\n\n    function rmSemester() {\n        //Removes the last semester from the list.\n        if (semesterCnt === 1) {\n            return;\n        }\n        const semPop:sem[] = currSemesters;\n        semPop.pop();\n        setCurrSemesters(semPop);\n        setClassYear(semPop[semPop.length-1].year);\n        setSeason(semPop[semPop.length-1].season);\n        setSemesterCnt(semPop[semPop.length-1].cnt);\n        subtractCredits();\n        popLists();\n    }\n\n    function saveData() {\n        //Saves list of semesters and courselist to local storage.\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(listOfCourseLists));\n    }\n\n    function showDegreeReq(){\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    function prepCSV(c: Class): string {\n        let i = 0;\n        const len = c.description.length;\n        let newDes = \"\";\n        for (i;i<len;i++){\n            newDes += c.description[i].replace(\",\",\";\"); \n        }\n        return newDes;\n    }\n\n    function exportDataFromCSV() {\n        const csvCols = [\"Semester Num\", \"Semester Year\", \"Semester Season\", \"CourseID\", \"Course Name\", \"Course Description\", \"Credits\"];\n        const content = currSemesters.map(s => [\n            [s.courses.map(c=>[s.cnt,s.year,s.season,c.id,c.name,prepCSV(c),c.credits,]).join(\" \\n \")]\n        ].join(\"\\n\")).join(\"\\n\");\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvCols + \"\\n\" + content;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"my_plan.csv\");\n        document.body.appendChild(link); \n        link.click();\n    }\n\n    function importDataFromCSV() {\n        setUploadVisible(true);\n        return 0;\n    }\n\n    function buildCurrSemesters(data: sem[]) {\n        console.log(data);\n        /*\n        let i = 0;\n        \n        let newList: string[][] = [[]];\n        for (i=0;i<data.length-1;i++) {\n            newList = newList.concat([[]]);\n        }\n        for (i=0;i<data.length;i++){\n            console.log(data[i].cnt);\n            newList[i] = data[i].courses.map(c=>c.id);\n        }\n        */\n        let newSemesterList: Class [][] = [];\n        data.map((semesters)=>{\n            newSemesterList = newSemesterList.concat([semesters.courses]);\n        });\n        \n        setlistOfCourseLists(newSemesterList);\n\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(data));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(newSemesterList));\n        window.location.reload();\n        \n    }\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button data-testid=\"degree-button\" onClick={()=>{\n                showDegreeReq(); //console.log(listOfCourseLists);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} setVisible={setAllDegreeReqVisible} listOfCourseLists={listOfCourseLists} credits={credits}></AllDegreeReqs>\n            <Button className=\"semesterControls\" data-testid=\"add-sem-button\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" data-testid=\"remove-sem-button\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" data-testid=\"save-local-storage\" onClick={saveData}>Save Schedule</Button>\n            <Button className=\"saveData\" onClick={exportDataFromCSV}>Download Plan</Button>\n            <Button className=\"saveData\" onClick={importDataFromCSV}>Upload Schedule</Button>\n            <UploadSemesterModal visible={uploadVisible} setVisible={setUploadVisible} setPlan={(data) => buildCurrSemesters(data)} setSemesterCnt={setSemesterCnt} setClassYear={setClassYear} setSeason={setSeason}></UploadSemesterModal>\n            <Row className=\"semesterRows\">\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n//\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}