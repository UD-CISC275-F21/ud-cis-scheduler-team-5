{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","courseList","setCourseList","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","credits","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","hide","addCourseList","c","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Footer","Button","variant","onClick","editClass","cIdx","index","length","newClasses","Course","course","currCourses","setCurrCourses","removeCourseList","filter","courses","Row","Col","className","newCourses","concat","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","map","dept","courseID","slice","rawCourseId","split","newCourse","title","substr","parseInt","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","errorAddCourse","setErrorAddCourse","saveAdd","newClass","selectedCourse","console","log","deptCourses","loc","i","getPrereqs","j","size","Dropdown","Toggle","Menu","Item","selectedDept","handleDeptClick","cID","handleIDClick","xs","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","setCurrClasses","WelcomeMsg","displayWelcome","setDisplayWelcome","Alert","DegreeRequirements","requirement","fulfilled","degreeReqVisible","Text","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_COURSELIST","INITIAL_COURSELIST","INITIAL_SEMESTER","cnt","year","App","rawSchedule","localStorage","getItem","JSON","parse","getLocalStoragePlan","currSemesters","setCurrSemesters","semesterCnt","setSemesterCnt","rawList","getLocalStorageList","setDegreeReqVisible","checkDegreeReq","aClass","useEffect","CLASSES","newSeason","newYear","newSem","semPop","pop","setItem","stringify","s","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ae9a1fd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, courseList, setCourseList} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, courseList: string[], setCourseList: (c: string[])=>void}) : JSX.Element {\n    //console.log(\"in EditCourseModal with course: \", ogClass.id);\n    //console.log(\"Curr Classes length: \", currClasses.length);\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>(ogClass.prereqs);\n\n\n    function saveEdit() {\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        addCourseList(editClass.id);\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                //console.log(\"Found the matching course at idx=\", index);\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n        //console.log(\"Length of newClasses:\", newClasses.length);\n        for (let index = 0; index < newClasses.length; index++) {\n            //console.log(\"ID: \", newClasses[index].id);\n            //console.log(\"Type: \", typeof newClasses[index]);\n            \n        }\n\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n    //console.log(\"Modal Course: \", ogClass.id);\n\n    const hide = () => setVisible(false);\n\n    function addCourseList(c: string){\n        setCourseList([...courseList, c]);\n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre Requisits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR([ev.target.value])}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={()=>{\n                    hide(); addCourseList(ogClass.id);\n                }}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, courseList, setCourseList} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, courseList: string[], setCourseList: (c: string[])=>void}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    function editCourse():void{\n        //console.log(\"set visible \", course);\n        removeCourseList(course.id);\n        setVisible(true);\n    }\n\n    function removeCourse():void{\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id == course.id){\n                removeCourseList(currCourses[index].id);\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        setCurrCourses(newCourses);\n    }\n\n    function removeCourseList(c: string) { \n        setCourseList(courseList.filter(courses => courses != c));\n    }\n\n    return (\n        <Row>\n            <Col>\n                <button className=\"removeCourse\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </Col>\n            <Col>{course.id}</Col>\n            <Col>{course.name}</Col>\n            {/*\n            <Col>{course.description}</Col>\n            */}\n            <Col>{course.credits}</Col>\n            <Col><button onClick={editCourse}>Edit</button></Col>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} courseList={courseList} setCourseList={setCourseList}></EditCourseModal>\n        </Row>\n\n            \n    );\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n    /* function saveEdit(){\n        \n    } */\n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit Course</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.courseID.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const rawCourseId = course.courseID.split(\" \");\n    const courseId = rawCourseId[0] + rawCourseId[1];\n    const newCourse:Class = { id:courseId, name:course.title.substr(11), credits:parseInt(course.credits), \n        description:course.description, prereqs:course.prereqs };\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n//import classes from \"../assets/classes.json\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, courseList, setCourseList} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, courseList: string[], setCourseList: (c: string[])=>void}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"Course Description\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string[]>([\"Course Prerequisite IDs\"]);\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n\n    //const deptList:string[] = courseMap.e\n\n    function saveAdd() {\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR};\n        //console.log(\"Length of newClasses:\", newClasses.length);\n        const prereqs = getPrereqs(courseId);\n \n        if(prereqs[0] === \"N/A\" || prereqs[0] === \"\" || prereqs.length===0){\n            setCurrCourse(newClasses.concat(newClass));\n            addCourseList(newClass.id);\n            hide();\n        }else{\n            let loc = -1;\n            for(let i = 0; i < courseList.length; i++){\n                for(let j = 0; j < prereqs.length; j++){\n                    if(courseList[i] === prereqs[j]){\n                        loc = i;\n                    }\n                }\n            }\n            if(loc != -1){\n                setCurrCourse(newClasses.concat(newClass));\n                addCourseList(newClass.id);\n                hide();\n            }else{\n                setErrorAddCourse(true);\n                console.log(\"Can't add that course yet!\");\n            }  \n        }\n        //console.log(courseList);\n    }\n    const hide = () => {\n        setErrorAddCourse(false);\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseDesc(\"Course Description\");\n        setCoursePreR([\"\"]);\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, prereqs:[\"None\"]}]);\n        setVisible(false);\n\n    };\n\n    /*\n    const deptSet:Set<string> = new Set();\n    for(let i = 0; i < classes.length; i++){\n        const classDept = classes[i][\"id\"].slice(0, 4);\n        deptSet.add(classDept);\n    }\n    const deptList:string[] = [];\n    deptSet.forEach(function(dept){\n        deptList.push(dept);\n    });\n    */\n\n    //console.log(deptList);\n\n\n    function handleDeptClick(selectedDept:string) {\n        const deptCourses:Class[] = courseMap[selectedDept];\n        //getCoursesfromDept(selectedDept);\n        //console.log(deptCourses.length);\n        setVisibleCourses(deptCourses);\n        \n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(visibleCourses[cIdx].prereqs);\n        }\n    }\n\n    /*\n\n    const getCoursesfromDept = (d:string) : Class[] => {\n        const validCourses: Class[] = [];\n        for(let i = 0; i < classes.length; i++){\n            if(classes[i][\"id\"].slice(0,4) === d){\n                //console.log(\"Found a course\");\n                const newClass:Class = {id:classes[i][\"id\"], name:classes[i][\"name\"], credits:classes[i][\"credits\"], prereqs:classes[i][\"prereqs\"], description:classes[i][\"description\"]};\n                validCourses.push(newClass);\n            }\n        }\n        return validCourses;\n    };\n\n    */\n\n    function getPrereqs(selectedCourse:string) : string[]{\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        //getCoursesfromDept(selectedCourse.slice(0,4));\n        let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                console.log(\"Course is in the list\");\n                loc = i;\n                break;\n            }\n        }\n        let prereqs:string[];\n        if(loc !== -1){\n            prereqs = deptCourses[loc].prereqs;\n        }else{\n            prereqs = [\"N/A\"];\n        }\n        console.log(\"Prereqs: \", prereqs);\n        return prereqs;\n    }\n\n\n    function addCourseList(c: string){\n        setCourseList([...courseList, c]);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Dropdown>\n                            <Dropdown.Toggle  className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            {/*\n                            <Dropdown.Menu>\n                                {deptList.map(d =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleDeptClick(d)} key = {d}>{d}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                            */}\n                            <Dropdown.Menu className=\"dropdown\">\n                                {Object.keys(courseMap).map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                {visibleCourses.map(c =>  {\n                                    //console.log(visibleCourses);\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseId\">Selected Course</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                            {errorAddCourse && <p>Cannot add this course!</p>}\n                        </Form>\n                    </Col>\n                    <Col>\n                        <h3>Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3>Prerequisites</h3>\n                        <p>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={()=>{\n                    saveAdd(); //displayCurrClasses(currClasses);\n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Card as BootstrapCard, Col, Row } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { sem } from \"../interfaces/sem\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, courseList, setCourseList}: {semester: sem, courseList: string[], setCourseList: (c: string[])=>void}): JSX.Element {\n    //console.log(\"in Semester\");\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(\"____ Year\");\n    const [season,setSeason] = React.useState<string>(\"____ Semester\");\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n\n    semester.courses = currClasses;\n    console.log(semester.courses);\n\n    function editCard() {\n        setVisible(true);\n    }\n\n    function addCourse() : void {\n        setAddCourseVisible(true);\n    }\n\n    return <BootstrapCard className=\"border-dark\">\n        <Col>\n            <div className=\"semester-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Row>\n                <Col><strong>Remove Course</strong></Col>\n                <Col><strong>Course ID</strong></Col>\n                <Col><strong>Course Name</strong></Col>\n                {/*\n                <Col><strong>Description</strong></Col>\n                */}\n                <Col><strong>Credits</strong></Col>\n                <Col><strong>Edit Course</strong></Col>\n            </Row>\n\n            {currClasses.map(c => {\n                return (\n                    <Row key = {c.id}>\n                        <Course course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} courseList={courseList} setCourseList={setCourseList}></Course>\n                    </Row>\n                );\n            })\n            }\n            <p></p>\n            <Button className=\"addCourse\" onClick={addCourse}>Add New Course</Button>\n            <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} courseList={courseList} setCourseList={setCourseList}></AddCourseModal>\n        </Col>\n    </BootstrapCard>;\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport { Alert,Button } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg(): JSX.Element {\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n\n    return (\n\n        <Alert show={displayWelcome} className=\"Welcome container pt-5\">\n                \n            <p><b>Hi, welcome to the UD Computer Science degree planner!</b></p>\n            <p>Add desired courses and semesters</p>\n                \n\n            <hr/>\n\n            <Button onClick={()=>setDisplayWelcome(false)}>\n                    Close and start scheduling\n            </Button>\n\n        </Alert>\n\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled, degreeReqVisible}: {requirement: string, fulfilled: boolean, degreeReqVisible: boolean}): JSX.Element {\n    return <Col>\n        {degreeReqVisible && <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-4\" : \"requnfilled degree col-sm-4\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>}\n    </Col>;\n}","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { sem } from \"./interfaces/sem\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { DegreeRequirements } from \"./components/DegreeRequirements\";\nimport CLASSES from \"./assets/classes.json\";\nimport { Class } from \"./interfaces/course\";\n\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_COURSELIST = \"cisc-degree-courseList\"; \nexport const INITIAL_COURSELIST: string[] = [];\nexport const INITIAL_SEMESTER: sem[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): string[] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_COURSELIST);\n    if (rawList === null) {\n        return [...INITIAL_COURSELIST];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(): sem[] {\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<sem[]>(getLocalStoragePlan());\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [courseList, setCourseList] = useState<string[]>(getLocalStorageList());\n    const [degreeReqVisible, setDegreeReqVisible] = useState<boolean>(false);\n\n    useEffect(() => {\n        console.log(`courseList is : ${courseList}`);\n    },[courseList]);\n\n    function addSemester() {\n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSem:sem[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSem));   \n    }\n\n    function clearSemesters() {\n        setCurrSemesters(INITIAL_SEMESTER);\n        setCourseList(INITIAL_COURSELIST);\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n    }\n\n    function rmSemester() {\n        if (semesterCnt === 1) {\n            return;\n        }\n        const semPop:sem[] = currSemesters;\n        semPop.pop();\n        setCurrSemesters(semPop);\n        setClassYear(semPop[semPop.length-1].year);\n        setSeason(semPop[semPop.length-1].season);\n        setSemesterCnt(semPop[semPop.length-1].cnt);\n    }\n\n    function saveData() {\n        console.log(currSemesters);\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_COURSELIST, JSON.stringify(courseList));\n    }\n\n    function checkDegreeReq(aClass: Class) {\n        let i = 0;\n        for(i = 0; i < courseList.length; i++){\n            if(courseList[i] === aClass.id){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function showDegreeReq(){\n        setDegreeReqVisible(!degreeReqVisible);\n    }\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg></WelcomeMsg>\n            <div>UD CIS Scheduler</div>\n            <Button onClick={()=>{\n                showDegreeReq(); //console.log(courseList);\n            }}>Show Degree Requirements</Button>\n            { \n                CLASSES.map(\n                    (aClass: Class) => <DegreeRequirements key={aClass.id} requirement={aClass.id} fulfilled={checkDegreeReq(aClass)} degreeReqVisible={degreeReqVisible}></DegreeRequirements> \n                )\n            }\n            <Button className=\"semesterControls\" onClick={addSemester}>Add Semester</Button>\n            <Button className=\"semesterControls\" onClick={clearSemesters}>Clear Semesters</Button>\n            <Button className=\"semesterControls\" onClick={rmSemester}>Remove Semester</Button>\n            <Button className=\"downloadData\" onClick={saveData}>Save Schedule</Button>\n            <Row>\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} courseList={courseList} setCourseList={setCourseList}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} courseList={courseList} setCourseList={setCourseList}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}