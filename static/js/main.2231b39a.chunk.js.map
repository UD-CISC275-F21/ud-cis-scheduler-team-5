{"version":3,"sources":["components/EditCourseModal.tsx","assets/x.svg","components/Course.tsx","components/EditSemesterModal.tsx","utilities/extractClasses.ts","components/AddCourseModal.tsx","components/Semester.tsx","components/WelcomeMsg.tsx","components/DegreeRequirements.tsx","components/SpecialDegreeReqs.tsx","components/AllDegreeReqs.tsx","components/UploadSemesterModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","ogClass","currClasses","visible","setVisible","setCurrCourse","lists","semesterCnt","credits","React","useState","id","courseId","setCourseId","name","courseName","setCourseName","description","courseDesc","setCourseDesc","courseCred","setCourseCred","prereqs","coursePreR","setCoursePreR","reqId","setReqId","prevReq","setPrevReq","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","as","rows","value","onChange","ev","target","Number","Dropdown","Toggle","className","variant","Menu","DEGREEREQS","filter","reqs","includes","map","req","Item","onClick","handleReqClick","Footer","Button","editClass","specreq","cIdx","index","length","newClasses","setGlobalCredits","globalCredits","setTechElectiveCredits","techElectiveCredits","setFocusAreaCredits","focusAreaCredits","copyList","listOfCourseLists","courseList","courses","setlistOfCourseLists","Course","course","currCourses","setCurrCourses","removeSpecialReqCredits","newCourses","concat","i","removelistOfCourseLists","src","x","alt","EditSemesterModal","classYear","season","setClassYear","setSeason","courseMap","courseData","dept","slice","newCourse","push","courseDepts","Object","keys","sort","newCourseMap","AddCourseModal","setDept","visibleCourses","setVisibleCourses","visibleDepts","setVisibleDepts","errorAddCourse","setErrorAddCourse","courseSearch","setCourseSearch","deptSearch","setDeptSearch","saveAdd","newClass","console","log","c","addlistOfCourseLists","handleDeptClick","selectedDept","deptCourses","handleIDClick","cID","selectedCourse","getPrereqs","size","Row","Col","placeholder","partOfDept","validDepts","len","depts","handleDeptSearch","partOfID","undefined","validCourses","handleCourseSearch","style","color","forEach","a","b","Semester","semester","addCourseVisible","setAddCourseVisible","year","setCurrClasses","Table","striped","bordered","colSpan","WelcomeMsg","setShow","slide","setSlide","Carousel","interval","activeIndex","onSelect","nextSlide","e","Caption","DegreeRequirements","requirement","fulfilled","Text","SpecialDegreeReqs","displayWhich","AllDegreeReqs","checkDegreeReq","aReq","j","checkSpecialReq","displayWhichReq","UploadSemesterModal","setPlan","setSemesterCnt","parseData","csv","newLine","headerEnd","indexOf","newPlanRaw","planCooking","parser","parserTmp","parserStart","parserEnd","newSemCnt","newSemCnt1","parseInt","newSemYear","newSemSeason","newClassID","isNaN","newNode","cnt","data","semesterList","semesterTemplate","buildYear","buildSeason","totalCredits","d","creditNumber","classFound","semesterListTmp","s","saveUpload","type","currentTarget","files","file","readfile","FileReader","readAsText","onload","planCSV","result","String","LOCAL_STORAGE_SCHEDULE","LOCAL_STORAGE_LISTOFCOURSELISTS","INITIAL_LISTOFCOURSELISTS","INITIAL_SEMESTER","getLocalStoragePlan","clear","rawSchedule","localStorage","getItem","JSON","parse","App","currSemesters","setCurrSemesters","allDegreeReqVisible","setAllDegreeReqVisible","uploadVisible","setUploadVisible","showWelcome","setShowWelcome","rawList","getLocalStorageList","prepCSV","newDes","replace","useEffect","stringify","totalCreditsListener","Container","newSeason","newYear","newSememester","newList","resetCredits","popSemester","pop","subtractCredits","poppedList","popLists","setItem","content","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","newClassList","semesters","newSemesterList","window","location","reload","buildCurrSemesters","semID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2231b39a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\n\nexport function EditCourseModal({ogClass, currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {ogClass: Class, currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(ogClass.id);\n    const [courseName, setCourseName] = React.useState<string>(ogClass.name);\n    const [courseDesc, setCourseDesc] = React.useState<string>(ogClass.description);\n    const [courseCred, setCourseCred] = React.useState<number>(ogClass.credits);\n    const [coursePreR, setCoursePreR] = React.useState<string>(ogClass.prereqs);\n    const [reqId, setReqId] = useState<string>(ogClass.id);\n    const [prevReq, setPrevReq] = useState<string>(\"\");\n\n\n    function saveEdit() {   // saves edited course to plan.\n        const editClass:Class = {name: courseName, id:courseId, description: courseDesc, credits: courseCred, prereqs: coursePreR, specreq: reqId};\n        let cIdx = -1;//index of edit class set to -1 for test purposes. If ogClass id is not in the currentClasses\n        for (let index = 0; index < currClasses.length; index++) {\n            if (currClasses[index].id === ogClass.id) {\n                cIdx = index;\n                break;\n            }\n        }\n        const newClasses:Class[] = [...currClasses];\n        newClasses[cIdx] = editClass;\n        \n        credits.setGlobalCredits(credits.globalCredits-ogClass.credits+courseCred);\n        if(reqId === \"Six additional credits of technical electives\"){   \n            credits.setTechElectiveCredits(credits.techElectiveCredits+editClass.credits);\n            if(prevReq === \"12 credits for an approved focus area\") {  \n                credits.setFocusAreaCredits(credits.focusAreaCredits-editClass.credits);   //remove credits from focus area if you switched from focus area to tech electives\n            } \n        } else if (reqId === \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits+editClass.credits);\n            if(prevReq === \"Six additional credits of technical electives\"){\n                credits.setTechElectiveCredits(credits.techElectiveCredits-editClass.credits); //vice versa of above case\n            }\n        } \n\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList => [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1].filter(courses => courses.id != ogClass.id), editClass];\n        lists.setlistOfCourseLists(copyList);\n        setCurrCourse(newClasses);\n        setVisible(false);\n    }\n\n    const hide = () => setVisible(false);   \n\n    function handleReqClick(req: string) {  //  allows editing or course for which degree requirement it fulfills\n        setPrevReq(reqId);\n        setReqId(req); \n    }\n\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseId\">Course ID</Form.Label>\n                        <Form.Control as=\"textarea\" aria-label=\"course-id-input\" rows={1}\n                            value={courseId} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseId(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseName\">Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDesc\">Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={courseDesc} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDesc(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseCred\">Course Credits</Form.Label>\n                        <Form.Control as=\"textarea\" aria-label=\"course-credit-input\" rows={1} \n                            value={courseCred} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCred(Number(ev.target.value))}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CoursePreR\">Course Pre-Requisites</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} \n                            value={coursePreR} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCoursePreR(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"CourseDegreeR\">Course Fulfills the Following Degree Requirement:</Form.Label>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"primary\" id=\"dropdown-basic\">\n                                {reqId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu data-testid=\"req-drop-menu\">\n                                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map(req =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleReqClick(req.id)} key={req.id}>{req.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","export default __webpack_public_path__ + \"static/media/x.98fe98fc.svg\";","import React from \"react\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport { EditCourseModal } from \"./EditCourseModal\";\nimport x from \"../assets/x.svg\";\n\nfunction Course({course, currCourses, setCurrCourses, lists, semesterCnt, credits} : \n    {course:Class, currCourses:Class[], setCurrCourses:(courses:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    \n    function editCourse():void{ // selects course in semester to edit attributes.\n        setVisible(true);\n    }\n\n    function removeCourse():void{   //  removes the selected course from a semester.\n        //probably want to put a \"Are You Sure?\" warning here\n        let newCourses:Class[] = [];\n        for (let index = 0; index < currCourses.length; index++) {\n            if(currCourses[index].id === course.id){\n                continue;\n            }else{\n                newCourses = newCourses.concat(currCourses[index]);\n            }\n        }\n        removelistOfCourseLists();\n        setCurrCourses(newCourses);\n    }\n\n    function removelistOfCourseLists() {    //  removes a course from a list of each semesters courses in the selected semester.\n        for(let i = 0; i < lists.listOfCourseLists[semesterCnt-1].length; i++){\n            if(lists.listOfCourseLists[semesterCnt-1][i].id === course.id) {\n                credits.setGlobalCredits(credits.globalCredits - lists.listOfCourseLists[semesterCnt-1][i].credits);\n                removeSpecialReqCredits(lists.listOfCourseLists[semesterCnt-1][i]);\n                const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n                copyList[semesterCnt-1] = copyList[semesterCnt-1].filter(courses => courses.id != course.id);\n                lists.setlistOfCourseLists(copyList);\n                break;\n            }\n        }\n    }\n\n    function removeSpecialReqCredits(course: Class){    //  removes speical requirements the removed course may have fulfilled. \n        if(course.specreq == \"Six additional credits of technical electives\"){\n            credits.setTechElectiveCredits(credits.techElectiveCredits-course.credits);\n        } else if (course.specreq == \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits-course.credits);\n        }\n    }\n\n    \n    return (\n        <tr>\n            <td>\n                <button className=\"removeCourse\" aria-label=\"remove-course\" onClick={removeCourse} margin-top={\"0.2em\"} margin-bottom=\"0.2em\">\n                    <img src={x} alt=\"Remove Course Button\"/>\n                </button>\n            </td>\n            <td data-testid=\"course-id\">{course.id} {course.name}</td>\n            {//<td>{course.name}</td>\n            }\n            <td>{course.credits}</td>\n            <td><button onClick={editCourse}>Edit</button></td>\n            <EditCourseModal ogClass={course} currClasses={currCourses} setCurrCourse={setCurrCourses} visible={visible} setVisible={setVisible} lists={lists} semesterCnt={semesterCnt} credits={credits}></EditCourseModal>\n        </tr>\n    );\n}\n\nexport default Course;","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\nexport function EditSemesterModal({classYear, season, visible, setClassYear, setSeason, setVisible}: \n    {classYear: string, season: string, visible: boolean, setClassYear: (s: string) => void, setSeason: (s: string) => void, setVisible: (b: boolean) => void}): JSX.Element {\n    \n\n    const hide = () => setVisible(false);\n    \n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header>\n                <Modal.Title>Edit Semester</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label data-testid = \"ClassYear\">Class Year</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-class-year\"\n                            value={classYear} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setClassYear(ev.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label data-testid = \"Season\">Season Semester</Form.Label>\n                        <Form.Control as=\"textarea\" rows={1} aria-label=\"sem-season\"\n                            value={season} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSeason(ev.target.value)}> </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={hide}>Edit</Button>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n//<Button variant=\"primary\" onClick={saveEdit}>Edit Course</Button>","//import classes from \"../assets/classes.json\";\nimport courseData from \"../assets/courseData.json\";\nimport { Class } from \"../interfaces/course\";\nimport {rawClass} from \"../interfaces/rawcourse\";\n\n\nlet courseMap:Record<string, Class[]> = {};\ncourseData.map((course:rawClass) => {\n    const dept = course.id.slice(0,4);\n    if(!(dept in courseMap)){\n        courseMap[dept] = [];\n    }\n    const courseId = course.id;\n    const newCourse:Class = { id:courseId, name:course.name, credits:course.credits, \n        description:course.description, prereqs:course.prereqs, specreq:\"\"};\n    courseMap[dept].push(newCourse);\n});\n\nconst courseDepts:string[] = Object.keys(courseMap);\ncourseDepts.sort();\n\nconst newCourseMap:Record<string, Class[]> ={};\ncourseDepts.forEach(function(dept){\n    newCourseMap[dept] = courseMap[dept].sort((a:Class, b:Class) :number => {\n        if(a.id > b.id){\n            return 1;\n        }else if(a.id < b.id){\n            return -1;\n        }else{\n            return 0;\n        }\n    });\n});\n\ncourseMap = newCourseMap;\nexport {courseMap};\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Dropdown,  Modal, Col, Row, Form} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport { courseMap } from \"../utilities/extractClasses\";\n\n\nexport function AddCourseModal({currClasses, visible, setVisible, setCurrCourse, lists, semesterCnt, credits} :\n    {currClasses:Class[], visible: boolean, setVisible: (b: boolean) => void, setCurrCourse: (c:Class[]) => void, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}) : JSX.Element {\n    const [courseId, setCourseId] = React.useState<string>(\"Course ID\");\n    const [courseName, setCourseName] = React.useState<string>(\"Course Name\");\n    const [courseDesc, setCourseDesc] = React.useState<string>(\"\");\n    const [courseCred, setCourseCred] = React.useState<number>(0);\n    const [coursePreR, setCoursePreR] = React.useState<string>(\"\");\n    const [dept, setDept] = React.useState<string>(\"Course Department\");\n    const [visibleCourses, setVisibleCourses] = React.useState<Class[]>([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n    const [visibleDepts, setVisibleDepts] = React.useState<string[]>(Object.keys(courseMap));\n    const [errorAddCourse, setErrorAddCourse] = React.useState<boolean>(false);\n    const [courseSearch, setCourseSearch] = React.useState<string>(\"Course ID\");\n    const [deptSearch, setDeptSearch] = React.useState<string>(\"Department\");\n    \n\n\n    function saveAdd() {    // adds selected course to current plan in the selected semester.\n        const newClasses:Class[] = [...currClasses];\n        const newClass:Class = {\"id\":courseId,\"name\":courseName, \"description\":courseDesc, \"credits\":courseCred, \"prereqs\":coursePreR, \"specreq\":\"\"};\n        const prereqs = newClass.prereqs;  //changing app to make it complatibale with new courseData.josn\n        console.log(newClass);\n        setCoursePreR(prereqs);\n        setCurrCourse(newClasses.concat(newClass));\n        addlistOfCourseLists(newClass);\n        hide();\n    }\n    const hide = () => {    //  hides modal when not using.\n        console.log(errorAddCourse);\n        setErrorAddCourse(false);\n        setCourseSearch(\"Course ID\");\n        setDeptSearch(\"Course Department\");\n        setDept(\"Course Department\");\n        setCourseId(\"Course ID\");\n        setCourseName(\"Course Name\");\n        setCourseDesc(\"Course Description\");\n        setCourseCred(0);\n        setCoursePreR(\"\");\n        setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n        setVisibleDepts(Object.keys(courseMap));\n        setVisible(false);\n    };\n\n    function handleDeptSearch(partOfDept:string){   //  searches courseMap data file for the department record\n        setDeptSearch(partOfDept);\n        const len = partOfDept.length;\n        const depts:string[] = Object.keys(courseMap);\n        console.log(\"First attempt: \", depts[0].slice(0,len));\n        let validDepts:string[] = [];\n        validDepts = depts.filter( dept => dept.slice(0,len) === partOfDept);\n        if(validDepts.length===0){\n            return;\n        }else if(validDepts.length === 1 && len === 4){\n            handleDeptClick(validDepts[0]);\n            setVisibleDepts(validDepts);\n        }else{\n            setCourseSearch(\"Course ID\");\n            setDept(\"Course Department\");\n            setCourseId(\"Course ID\");\n            setVisibleDepts(validDepts);\n            setVisibleCourses([{\"id\":\"None\", \"name\":\"None\", \"description\":\"None\", \"credits\":0, \"prereqs\":\"None\", \"specreq\":\"\"}]);\n        }\n        \n    }\n\n    function handleCourseSearch(partOfID:string){   // searches found department for course ID codes\n        setCourseSearch(partOfID);\n        const len = partOfID.length;\n        if(len < 4){\n            return;\n        }\n        if(courseMap[partOfID.slice(0,4)] === undefined){\n            console.log(\"Not a valid department\");\n        }else{\n            const validCourses = courseMap[partOfID.slice(0,4)].filter(c => c.id.slice(0,len) === partOfID);\n            if(validCourses.length === 1 && len === 7){\n                handleIDClick(validCourses[0].id);\n            }\n            \n           \n        }\n        return;\n    }\n\n    function handleDeptClick(selectedDept:string) { //  selects department from dropdown to browse that deparment's courses.\n        const deptCourses:Class[] = courseMap[selectedDept];\n        setCourseId(\"Course ID\");\n        setDeptSearch(selectedDept);\n        setVisibleCourses(deptCourses);\n        setCourseSearch(selectedDept);\n        setDept(selectedDept);\n    }\n\n    function handleIDClick(cID:string) {    //  selects course ID from the dropdown and displays course attributes to the user.\n        setErrorAddCourse(false);\n        let cIdx = -1;\n        for(let i = 0; i < visibleCourses.length; i++){\n            if(visibleCourses[i].id === cID){\n                cIdx = i;\n                break;\n            }\n        }\n        if(cIdx != -1){\n            setCourseId(cID);\n            setCourseName(visibleCourses[cIdx].name);\n            console.log(visibleCourses[cIdx].name);\n            setCourseDesc(visibleCourses[cIdx].description);\n            setCourseCred(visibleCourses[cIdx].credits);\n            setCoursePreR(getPrereqs(visibleCourses[cIdx].id));\n        }\n    }\n\n    function getPrereqs(selectedCourse:string) : string {   //  displays prereqs attribute from the Class object found in deptCourses.\n        console.log(\"Looking for \", selectedCourse);\n        const deptCourses = courseMap[selectedCourse.slice(0,4)];\n        //let loc = -1;\n        for(let i = 0; i < deptCourses.length; i++){\n            console.log(deptCourses[i].id);\n            if(deptCourses[i].id === selectedCourse){\n                return deptCourses[i].prereqs;\n                //loc = i;\n                //break;\n            }\n        }\n        return \"\";\n    }\n\n\n    function addlistOfCourseLists(c: Class){    // adds to record of courses in selected semester. \n        credits.setGlobalCredits(credits.globalCredits+courseCred);\n        const copyList: Class[][] = lists.listOfCourseLists.map(courseList=> [...courseList]);\n        copyList[semesterCnt-1] = [...copyList[semesterCnt-1], c];\n        lists.setlistOfCourseLists(copyList);\n    }\n\n    return (\n        <Modal size=\"lg\" show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className=\"myRow\">\n                    <Col className=\"myCol\">\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"DeptSearch\">Department Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    placeholder={deptSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleDeptSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle className=\"DDDept\" variant=\"secondary\" id=\"dropdown-basic\" data-testid=\"dept-dropdown\">\n                                {dept}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdown\" data-testid=\"dept-drop-menu\">\n                                {visibleDepts.map(dept=>{\n                                    return <Dropdown.Item onClick={() => handleDeptClick(dept)} key = {dept}>{dept}</Dropdown.Item>;\n                                })\n\n                                }\n                            \n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label data-testid = \"CourseSearch\">Course Search</Form.Label>\n                                <Form.Control as=\"textarea\" rows={1} \n                                    placeholder={courseSearch} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => handleCourseSearch(ev.target.value)}></Form.Control>\n                            </Form.Group>\n                        </Form>\n                        <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\" className=\"DDCourseID\">\n                                {courseId}\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu data-testid=\"course-drop-menu\">\n                                {visibleCourses.map(c =>  {\n                                    return (\n                                        <Dropdown.Item onClick={() => handleIDClick(c.id)} key = {c.id}>{c.id}</Dropdown.Item>);\n                                })\n                                }\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <br/>\n                        <h3 className=\"text-center\"><strong>{courseId}</strong></h3>            \n                        <h3 className=\"text-center\">Description</h3>\n                        <p>{courseDesc}</p>\n                        <h3 className=\"text-center\">Prerequisites</h3>\n                        <p style={{color: \"red\"}}>{coursePreR}</p>\n                    </Col>\n                </Row>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"add-course-button\" variant=\"primary\" onClick={()=>{\n                    saveAdd(); \n                }}>Add Course</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\nimport { semester } from \"../interfaces/semester\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { listHandlers } from \"../interfaces/listHandlers\";\nimport Course from \"./Course\";\nimport { EditSemesterModal } from \"./EditSemesterModal\";\nimport { AddCourseModal } from \"./AddCourseModal\";\n\n\n\nexport function Semester({semester, lists, semesterCnt, credits}: {semester: semester, lists: listHandlers, semesterCnt: number, credits: creditsHandlers}): JSX.Element {\n  \n    const [addCourseVisible, setAddCourseVisible] = React.useState<boolean>(false);\n    const [classYear,setClassYear] = React.useState<string>(semester.year);\n    const [season,setSeason] = React.useState<string>(semester.season);\n    const [currClasses, setCurrClasses] = React.useState<Class[]>(semester.courses);\n    const [visible, setVisible] = React.useState<boolean>(false);\n\n    semester.courses = currClasses.map(c=>c);\n\n    function editCard() {   // sets visiblity of the edit course modal.\n        setVisible(true);\n    }\n\n    function addCourse() : void {   // sets visibility to the add course modal.\n        setAddCourseVisible(true);\n    }\n\n    return (\n        <div className=\"semesterCard\">\n            <div className=\"semester-title\" data-testid=\"sem-title\">\n                <strong>{classYear}: {season} <button onClick={editCard}>Edit Semester</button></strong>\n                <EditSemesterModal classYear={classYear} season={season} setClassYear={setClassYear} setSeason = {setSeason} visible={visible} setVisible={setVisible}></EditSemesterModal>\n            </div>\n            <Table  striped bordered size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>Remove</th>\n                        <th>Course</th>\n                        {//<th>Course Name</th>\n                        }\n                        <th>Credits</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {currClasses.map(c=> {\n                        return (\n                            <Course key = {c.id} course={c} currCourses={currClasses} setCurrCourses={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></Course>\n                        );\n                    })\n                    }\n                    <tr>\n                        <td colSpan={5}><Button className=\"addCourse\" data-testid=\"add-new-course\" onClick={addCourse}>Add New Course</Button></td>\n                    </tr>\n                </tbody>\n                <AddCourseModal currClasses={currClasses} visible={addCourseVisible} setVisible={setAddCourseVisible} setCurrCourse={setCurrClasses} lists={lists} semesterCnt={semesterCnt} credits={credits}></AddCourseModal>\n            </Table>\n        </div>\n    );\n}\n\nexport default Semester;\n","import React, { useState } from \"react\";\nimport {Button,Carousel, Modal } from \"react-bootstrap\";\nimport \"../App.css\";\n\n\n\nfunction WelcomeMsg({show, setShow}:{show:boolean, setShow:(b:boolean)=>void}): JSX.Element {\n    const [slide, setSlide] = useState(0);\n\n    const hide = () => {    //  sets visibility of the welcome message\n        setShow(false);\n        setSlide(0);\n    };\n\n    const handleClick = (nextSlide: number, e:Record<string, unknown> | null) => {  // each click cycles thorugh a series of how-to's\n        setSlide(nextSlide);    \n        console.log(e);\n    };\n\n    return (\n        <div>\n            {show && <Modal size=\"lg\" show={show} onHide={hide}>\n                <Modal.Header>\n                    <Modal.Title id=\"welcomeModal\">UD Computer Science Degree Planner</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Carousel variant=\"dark\" className=\"carousel\" interval={null} activeIndex={slide} onSelect={handleClick}>\n                        <Carousel.Item id = \"item\">\n                            <Carousel.Caption>\n                                <h3>Welcome to the UD Computer Science Degree Planner!</h3>\n                                <p>Use this guide to use the website.</p>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                        <Carousel.Item id = \"item\">\n                            <h3 className=\"caroHead\">Adding Courses</h3>\n                            <Carousel.Caption>\n                                <p className=\"caroPara\">To add a course, click on the Add New Course Button. You will then be prompted to search for a course.\n                                    You can start by selecting a department (type or use the dropdown menu), or you can directly search for a \n                                    course in the Course Search box. The course description and prerequisites will be visible once the course\n                                    is selected. Click add course to add the course to the respective semester.\n                                </p>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                        <Carousel.Item id=\"item\">\n                            <h3 className=\"caroHead\">Adding Semesters</h3>\n                            <Carousel.Caption>\n                                <p className = \"caroPara\">To add a new semester to the plan, click on the Add Semester button. This will add a \n                                new semester table to the end of your current plan. You can edit the Year and Season of the added semester with\n                                the Edit Semester button.\n                                </p>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                        <Carousel.Item id=\"item\">\n                            <h3 className=\"caroHead\">Saving Schedule</h3>\n                            <Carousel.Caption>\n                                <p className=\"caroPara\">There are 2 ways to save your schedule. For editing convienience, clicking the Save\n                                Schedule button will store your schedule within the website. If you reload the page after clicking Save Schedule,\n                                your plan will still be there. For sharing with an adivsor, clicking the Download Plan button will create a csv file \n                                to download onto your computer. \n                                </p>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                        <Carousel.Item id=\"item\">\n                            <h3 className=\"caroHead\">Uploading Schedule</h3>\n                            <Carousel.Caption>\n                                <p className=\"caroPara\">After saving a schedule, the schedule can be imported to the website to automatically\n                                fill your plan by clicking the Upload Schedule button, and selecting your file to be uploaded. Be sure not to edit this file when you download it, as it may cause unexpected\n                                outcomes on the website.\n                                </p>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                    </Carousel>\n                </Modal.Body>\n                <Button onClick={hide}>\n                        Close and start scheduling\n                </Button>\n            </Modal>}\n        </div>\n                \n    );\n}\n\nexport default WelcomeMsg;","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\n\n\nexport function DegreeRequirements({requirement, fulfilled}: {requirement: string, fulfilled: boolean}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}, {fulfilled ? \"Fulfilled\" : \"Unfulfilled\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { Card as BootstrapCard, Col, Row} from \"react-bootstrap\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\nexport function SpecialDegreeReqs({requirement, fulfilled, displayWhich, credits}: \n    \n    {requirement: string, fulfilled: boolean, displayWhich: boolean, credits: creditsHandlers}): JSX.Element {\n    return <Col>\n        <BootstrapCard className = {fulfilled ? \"reqfilled degree col-sm-10\" : \"requnfilled degree col-sm-10\"} >  \n            <Row>\n                <BootstrapCard.Text>Requirement: {requirement}</BootstrapCard.Text>\n                <BootstrapCard.Text> {displayWhich ? credits.techElectiveCredits + \" out of 6\" : credits.focusAreaCredits + \" out of 12\"} </BootstrapCard.Text>\n            </Row>\n        </BootstrapCard>\n    </Col>;\n}","import React from \"react\";\nimport { DegreeRequirements } from \"../components/DegreeRequirements\";\nimport { SpecialDegreeReqs } from \"../components/SpecialDegreeReqs\";\nimport DEGREEREQS from \"../assets/degreereqs.json\";\nimport { DegreeReq } from \"../interfaces/degreereq\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\nimport { Button, Modal, Table} from \"react-bootstrap\";\nimport { Class } from \"../interfaces/course\";\n\n\nexport function AllDegreeReqs({visible, setVisible, listOfCourseLists, credits}: \n    {visible: boolean, setVisible: (v: boolean)=>void , listOfCourseLists: Class[][], credits: creditsHandlers}): JSX.Element {\n\n    function checkDegreeReq(aReq: DegreeReq) {  // checks each record of courses in each semester for a degree requirement.\n        let i = 0;\n        let j = 0;\n        for(i = 0; i < listOfCourseLists.length; i++){\n            for(j = 0; j < listOfCourseLists[i].length; j++){\n                if(aReq.id.includes(listOfCourseLists[i][j].id)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function checkSpecialReq(aReq: DegreeReq){  // checks each record of courses in each semester for a special requirement.\n        if(aReq.id === \"Six additional credits of technical electives\" && credits.techElectiveCredits === 6){\n            return true;\n        } else if(aReq.id === \"12 credits for an approved focus area\" && credits.focusAreaCredits === 12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function displayWhichReq(aReq: DegreeReq){  // displays requirement specifics.\n        if(aReq.id === \"Six additional credits of technical electives\"){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function hide(){    // hides shows modal.\n        setVisible(!visible);\n    }\n\n    return <Modal show={visible}>\n        <Modal.Header>\n            <Modal.Title>Degree Requirements</Modal.Title>\n            <Button onClick={hide}>Close</Button>\n        </Modal.Header>\n\n        <strong className=\"degree-subtitle\" data-testid=\"global-credit-counter\">Credit Count: {credits.globalCredits} out of 124 needed</strong>\n        <Table data-testid=\"degreeReqs\">\n            <th className=\"degree-subtitle\">Core Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CISC\") || reqs.id.includes(\"MATH\") || reqs.id.includes(\"ENGL\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Special Requirements</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"credits\")).map((aReq: DegreeReq) => {\n                    return (\n                        <SpecialDegreeReqs key={aReq.id} requirement={aReq.id} fulfilled={checkSpecialReq(aReq)} displayWhich={displayWhichReq(aReq)} credits={credits}></SpecialDegreeReqs> \n                    );\n                })}\n            </tbody>\n        </Table>\n        <strong className=\"degree-subtitle\">Science Requirements</strong>\n        <Table> \n            <th className=\"degree-subtitle\">Option 1</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"PHYS\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 2</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"CHEM\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 3</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"BISC\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 4</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL105\") || reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL115\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n        <Table> \n            <th className=\"degree-subtitle\">Option 5</th>\n            <tbody>\n                {DEGREEREQS.filter(reqs => reqs.id.includes(\"GEOL107\") || reqs.id.includes(\"GEOL110\")).map((aReq: DegreeReq) => {\n                    return (\n                        <DegreeRequirements key={aReq.id} requirement={aReq.id} fulfilled={checkDegreeReq(aReq)}></DegreeRequirements>  \n                    );\n                })}\n            </tbody>\n        </Table>\n    </Modal>;\n}","import React from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { semester } from \"../interfaces/semester\";\nimport { importClass } from \"../interfaces/importPlan\";\nimport { Class } from \"../interfaces/course\";\nimport { courseMap } from \"../utilities/extractClasses\";\nimport { creditsHandlers } from \"../interfaces/creditsHandlers\";\n\n\n\nexport function UploadSemesterModal({credits, visible, setVisible, setPlan, setSemesterCnt, setSeason, setClassYear}: \n    {credits: creditsHandlers, visible: boolean, setVisible: (b: boolean) => void, setPlan: (s: semester[])=>void, setSemesterCnt: (s: number)=>void, setSeason: (s: string)=>void, setClassYear: (s: string)=>void}): JSX.Element {\n\n    const hide = () => setVisible(false);   //  sets visibility of the uplay semester modal\n\n    function upload(e: React.ChangeEvent<HTMLInputElement>) {   //  opens an uploaded file to convert to the plan data file\n        if (e.currentTarget.files !== null){\n            const file = e.currentTarget.files[0];\n            const readfile = new FileReader();\n            readfile.readAsText(file);\n            readfile.onload = async(e) => {\n                const planCSV = e.target?.result;\n                const plsWork = String(planCSV);\n                parseData(plsWork);\n            };\n        } else {\n            return;\n        }\n    }\n\n    function parseData(csv: string) {   //  parases though each field and creates a list of couseIDs to search for the courseMap\n        const headerEnd = csv.indexOf(\"\\n\");\n        let newPlanRaw: string[] = [];\n        let newLine: string;\n        let planCooking: importClass[] = [];\n        let parser = headerEnd;\n        let parserTmp = 0;\n\n        while (parser !== -1) {\n            parserTmp = csv.indexOf(\"\\n\",parser+1);\n            newLine = csv.slice(parser,parserTmp);\n            newPlanRaw = newPlanRaw.concat([newLine]);\n            parser = parserTmp;\n        }\n\n        newPlanRaw.forEach(c=>{\n            let parserStart = 1;\n            let parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemCnt = c.slice(parserStart,parserEnd);\n            const newSemCnt1 = parseInt(newSemCnt,10);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemYear = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newSemSeason = c.slice(parserStart+1,parserEnd);\n\n            parserStart = parserEnd;\n            parserEnd = c.indexOf(\",\",parserStart+1);\n            const newClassID = c.slice(parserStart+1,parserEnd);\n\n            if(!isNaN(newSemCnt1)) {\n                const newNode:importClass[] = [{cnt:newSemCnt1,year:newSemYear,season:newSemSeason,id:newClassID}];\n                planCooking = planCooking.concat(newNode);\n            }\n        });    \n        saveUpload(planCooking);\n    }\n\n    function saveUpload(data: importClass[]) {  //  searches a list of courseIDs from the course map and adds them to the plan data file.\n        let semesterList: semester[] = [];\n        let i = 0;\n        for (i;i<data[data.length-1].cnt;i++) {\n            const year = buildYear(i);\n            const season = buildSeason(i);\n            const semesterTemplate: semester = {    // create a template for each semester we will be adding courses to.\n                cnt:i+1,\n                year: year,\n                season: season,\n                courses: []\n            }; \n            semesterList = semesterList.concat(semesterTemplate);\n        }\n        let totalCredits = 0;\n        data.forEach(d=>{\n            semesterList[d.cnt-1].season = d.season;\n            semesterList[d.cnt-1].year = d.year;\n\n            // Look up course \n            const x: Class[] = courseMap[d.id.slice(0,4)].filter(c=>c.id.indexOf(d.id)!==-1);\n            const creditNumber = x[0].credits;\n            const classFound:Class[] = [{id:x[0].id,name:x[0].name,description:x[0].description,credits:creditNumber,prereqs:x[0].prereqs, specreq:\"\"}];\n            \n            totalCredits += creditNumber;\n            removeSpecialReqCredits(classFound[0]);\n            const courses = semesterList[d.cnt-1].courses.concat(classFound);\n            semesterList[d.cnt-1].courses = courses;\n        });\n\n        const semesterListTmp = semesterList.map(s=>s);\n        credits.setGlobalCredits(totalCredits);\n        setSeason(semesterList[semesterList.length-1].season);\n        setSemesterCnt(semesterList[semesterList.length-1].cnt);\n        setClassYear(semesterList[semesterList.length-1].year);\n        setPlan(semesterListTmp);\n        hide();\n    }\n\n    function buildSeason(cnt: number):string {  // sets the season while building the semester template\n        if (cnt%2 !== 0) {\n            return \"Spring\";\n        } else {\n            return \"Fall\";\n        }\n    }\n\n    function buildYear(cnt: number):string {  // sets the year while building the semester template\n        if (cnt === 0 || cnt === 1) {\n            return \"Freshman\";\n        } else if (cnt === 2 || cnt === 3) {\n            return \"Sohpmore\";\n        } else if (cnt === 4 || cnt === 5) {\n            return \"Junior\";\n        } else {\n            return \"Senior\";\n        }\n    }\n\n    function removeSpecialReqCredits(course: Class){    \n        if(course.specreq == \"Six additional credits of technical electives\"){\n            credits.setTechElectiveCredits(credits.techElectiveCredits-course.credits);\n        } else if (course.specreq == \"12 credits for an approved focus area\"){\n            credits.setFocusAreaCredits(credits.focusAreaCredits-course.credits);\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={visible} onHide={hide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Upload Plan</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <input className=\"csvUpload\" type=\"file\" onChange={upload}/>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={()=>{\n                        hide();\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n    \n}\n\n\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Col, Row, Button, Container } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Semester from \"./components/Semester\";\nimport { semester } from \"./interfaces/semester\";\nimport WelcomeMsg from \"./components/WelcomeMsg\";\nimport { Class } from \"./interfaces/course\";\nimport { AllDegreeReqs } from \"./components/AllDegreeReqs\";\nimport { UploadSemesterModal } from \"./components/UploadSemesterModal\";\n\nexport const LOCAL_STORAGE_SCHEDULE = \"cisc-degree-schedule\";\nexport const LOCAL_STORAGE_LISTOFCOURSELISTS = \"cisc-degree-listofcourseLists\"; \nexport const INITIAL_LISTOFCOURSELISTS: Class[][] = [[]];\n\nexport const INITIAL_SEMESTER: semester[] =  [\n    {\n        cnt: 1,        \n        year: \"Freshman\",\n        season: \"Fall\",\n        courses: []\n    }\n];\n\nexport function getLocalStorageList(): Class[][] {\n    const rawList: string | null = localStorage.getItem(LOCAL_STORAGE_LISTOFCOURSELISTS);\n    if (rawList === null) {\n        return [...INITIAL_LISTOFCOURSELISTS];\n    } else {\n        return JSON.parse(rawList);\n    }\n}\n\nexport function getLocalStoragePlan(clear: boolean): semester[] {\n    if (clear === true) return [...INITIAL_SEMESTER];\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SEMESTER];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\nfunction App(): JSX.Element {\n    const [currSemesters,setCurrSemesters] = React.useState<semester[]>(getLocalStoragePlan(false));\n    const [classYear,setClassYear] = React.useState<string>(currSemesters[currSemesters.length-1].year);\n    const [season,setSeason] = React.useState<string>(currSemesters[currSemesters.length-1].season);\n    const [semesterCnt,setSemesterCnt] = React.useState<number>(currSemesters[currSemesters.length-1].cnt);\n    const [allDegreeReqVisible, setAllDegreeReqVisible] = useState<boolean>(false);\n    const [uploadVisible, setUploadVisible] = useState<boolean>(false);\n    const [showWelcome, setShowWelcome] = useState<boolean>(true);\n\n    const [listOfCourseLists, setlistOfCourseLists] = useState<Class[][]>(getLocalStorageList());  \n    const [globalCredits, setGlobalCredits] = useState<number>(0);\n    const [techElectiveCredits, setTechElectiveCredits] = useState<number>(0);\n    const [focusAreaCredits, setFocusAreaCredits] = useState<number>(0);\n\n    const credits = {globalCredits, setGlobalCredits, techElectiveCredits, setTechElectiveCredits, focusAreaCredits, setFocusAreaCredits};\n    const lists = {listOfCourseLists, setlistOfCourseLists};\n\n    useEffect(() => {   \n        console.log(`listOfCourseLists is : ${JSON.stringify(listOfCourseLists)}`);\n    },[listOfCourseLists]);\n\n    useEffect(() => {   // updates credits\n        let totalCreditsListener = 0;\n        currSemesters.forEach(s=>s.courses.forEach(c=>totalCreditsListener+=c.credits));      \n        setGlobalCredits(totalCreditsListener);  \n    });\n\n    const showGuide = () => {\n        setShowWelcome(true);\n    };\n\n    function addSemester() {\n        // Adds semester to the list of semesters in the user's plan. Semester attributes set depending on the last semester attributes. \n        let newSeason = season;\n        let newYear = classYear;\n        switch (season) {\n        case \"Fall\":                // places in either the left, fall bucket, or right, spring bucket\n            setSeason(\"Spring\");\n            newSeason = \"Spring\";\n            break;\n        case \"Spring\":\n            setSeason(\"Fall\");\n            newSeason = \"Fall\";\n            switch (classYear) {\n            case \"Freshman\":\n                setClassYear(\"Sophmore\");  \n                newYear = \"Sophmore\";\n                break;\n            case \"Sophmore\":\n                setClassYear(\"Junior\");\n                newYear = \"Junior\";\n                break;\n            case \"Junior\":\n                setClassYear(\"Senior\");\n                newYear = \"Senior\";\n                break; \n            case \"Senior\":\n                break;\n            }\n        } \n        const newSememester:semester[] = [{cnt: semesterCnt+1,year: newYear,season: newSeason,courses: []}];\n        setSemesterCnt(semesterCnt+1);\n        setCurrSemesters(currSemesters.concat(newSememester));\n        const newList = [...listOfCourseLists];\n        newList.push([]);\n        setlistOfCourseLists(newList);\n    }\n\n    function resetCredits() {   // resets credits when called in \"clearSemesters()\"\n        setGlobalCredits(0);\n        setTechElectiveCredits(0);\n        setFocusAreaCredits(0);\n        if(currSemesters[0].courses.length > 0){\n            for(let i = 0; i < currSemesters[0].courses.length; i++){\n                setGlobalCredits(0+currSemesters[0].courses[i].credits);\n            }\n        }\n    }\n\n    function clearSemesters() { // Clears all semesters except for the first. Resets plan to initial state. \n\n        const semesterReset: semester[] =  [\n            {\n                cnt: 1,        \n                year: \"Freshman\",\n                season: \"Fall\",\n                courses: []\n            }\n        ];\n        setCurrSemesters(semesterReset);\n        setCurrSemesters(getLocalStoragePlan(true));\n        setlistOfCourseLists([currSemesters[0].courses]);\n        resetCredits();\n        setClassYear(\"Freshman\");\n        setSeason(\"Fall\");\n        setSemesterCnt(1);\n       \n    }\n\n    function popLists() {   // pops off the last list when called in \"rmSemester()\"\n        const poppedList = [...listOfCourseLists];\n        poppedList.pop();\n        setlistOfCourseLists(poppedList);\n    }\n\n    function subtractCredits() {    // subtracts credits from the removed semester, called in \"rmSemester()\"\n        console.log(listOfCourseLists);\n        for(let i = 0; i < listOfCourseLists[semesterCnt-1].length; i++){\n            setGlobalCredits(globalCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            if(listOfCourseLists[semesterCnt-1][i].specreq === \"Six additional credits of technical electives\"){\n                setTechElectiveCredits(techElectiveCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            } else if(listOfCourseLists[semesterCnt-1][i].specreq === \"12 credits for an approved focus area\") {\n                setFocusAreaCredits(focusAreaCredits-listOfCourseLists[semesterCnt-1][i].credits);\n            }\n        }\n    }\n\n    function rmSemester() {     // Removes the last semester from the list, called from remove semester button.\n        \n        if (semesterCnt === 1) {\n            return;\n        }\n        const popSemester:semester[] = currSemesters.map(c=>c);\n        popSemester.pop();\n        setCurrSemesters(popSemester);\n        setClassYear(popSemester[popSemester.length-1].year);\n        setSeason(popSemester[popSemester.length-1].season);\n        setSemesterCnt(popSemester[popSemester.length-1].cnt);\n        subtractCredits();\n        popLists();\n    }\n\n    function saveData() {   // Saves list of semesters and courselist to local storage, called from save button.\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(currSemesters));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(listOfCourseLists));\n    }\n\n    function showDegreeReq(){   //  Shows degree requirements modal\n        setAllDegreeReqVisible(!allDegreeReqVisible);\n    }\n\n    function prepCSV(c: Class): string {    // filters out commas in prep for csv export, called in \"exportDataFromCSV()\"\n        let i = 0;\n        const len = c.description.length;\n        let newDes = \"\";\n        for (i;i<len;i++){\n            newDes += c.description[i].replace(\",\",\";\"); \n        }\n        return newDes;\n    }\n\n    function exportDataFromCSV() {  //  converts schedule to CSV and downloads to computer, called from download plan button.\n        const csvCols = [\"Semester Num\", \"Semester Year\", \"Semester Season\", \"CourseID\", \"Course Name\", \"Course Description\", \"Credits\"];\n        const content = currSemesters.map(s => [\n            [s.courses.map(c=>[s.cnt,s.year,s.season,c.id,c.name,prepCSV(c),c.credits,]).join(\" \\n \")]\n        ].join(\"\\n\")).join(\"\\n\");\n        const csvContent = \"data:text/csv;charset=utf-8,\" + csvCols + \"\\n\" + content;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"my_plan.csv\");\n        document.body.appendChild(link); \n        link.click();\n    }\n\n    function importDataFromCSV() {  //  shows modal to upload semester plan csv.\n        setUploadVisible(true);\n    }\n\n    function buildCurrSemesters(data: semester[]) { //  converts csv data to a useable plan\n        let newClassList: Class [][] = [];\n        let totalCredits = 0;\n        data.map((semesters)=>{\n            newClassList = newClassList.concat([semesters.courses]);\n            semesters.courses.forEach(c=> totalCredits += c.credits );\n        });\n        \n        setlistOfCourseLists(newClassList);\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(data));\n        localStorage.setItem(LOCAL_STORAGE_LISTOFCOURSELISTS, JSON.stringify(newClassList));\n\n        const newSemesterList = data.map(s=>s);\n        setCurrSemesters(newSemesterList);\n        window.location.reload();\n    }\n\n\n    return (\n        <div className=\"App\">\n            <WelcomeMsg show={showWelcome} setShow={setShowWelcome}></WelcomeMsg>\n            <Button id=\"helpButton\" onClick={showGuide}>Help</Button>\n\n            <h2>UD CIS Scheduler</h2>\n\n            <Button className=\"control-buttons\" data-testid=\"degree-button\" onClick={()=>{\n                showDegreeReq(); //console.log(listOfCourseLists);\n            }}>Show Degree Requirements</Button>\n            <AllDegreeReqs visible={allDegreeReqVisible} setVisible={setAllDegreeReqVisible} listOfCourseLists={listOfCourseLists} credits={credits}></AllDegreeReqs>\n            <Container>\n                <Row>\n                    <Col><h6>Semester Controls</h6></Col>\n                    <Col><h6>Import/Export Schedule</h6></Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button className=\"control-buttons\" data-testid=\"add-sem-button\" onClick={addSemester}>Add Semester</Button>\n                        <Button className=\"control-buttons\" onClick={clearSemesters}>Clear Semesters</Button>\n                        <Button className=\"control-buttons\" data-testid=\"remove-sem-button\" onClick={rmSemester}>Remove Semester</Button>\n                    </Col>\n                    <Col>\n                        <Button className=\"control-buttons\" data-testid=\"save-local-storage\" onClick={saveData}>Save Plan</Button>\n                        <Button className=\"control-buttons\" onClick={exportDataFromCSV}>Download Plan</Button>\n                        <Button className=\"control-buttons\" onClick={importDataFromCSV}>Upload Plan</Button>\n                    </Col>\n\n                </Row>\n            </Container>\n            \n            <UploadSemesterModal credits={credits} visible={uploadVisible} setVisible={setUploadVisible} setPlan={(data) => buildCurrSemesters(data)} setSemesterCnt={setSemesterCnt} setClassYear={setClassYear} setSeason={setSeason}></UploadSemesterModal>\n            <Row className=\"semesterRows\">\n                <Col id=\"FallSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Fall\"){\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n                <Col id=\"SpringSemesters\">\n                    {currSemesters.map(s=>{\n                        if (s.season === \"Spring\") {\n                            const semID = \"semester\" + s.cnt;\n                            return(\n                                <Semester key={semID} semester={s} lists={lists} semesterCnt={s.cnt} credits={credits}></Semester>\n                            );\n                        }\n                    })}\n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n//\n//classYear={s.year} season={s.season}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n<link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\"\n    integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\"\n    crossOrigin=\"anonymous\"\n/>;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}